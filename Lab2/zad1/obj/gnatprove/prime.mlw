(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float_type" defined at a-ngelfu.ads:37 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Ada__numerics__elementary_functions__float_type
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float_type 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float_type, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float_type__ref =
  { mutable float_type__content "model_trace:" "name:" : float_type }
 
 function float_type__ref___projection 
   (a : float_type__ref) : float_type =
  a.float_type__content
 
 meta "model_projection" function float_type__ref___projection
 
 meta "inline : no" function float_type__ref___projection
 
 val float_type__havoc 
   (x : float_type__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float_type" defined at a-ngelfu.ads:37 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Types.Translate_Type *)
module Ada__numerics__elementary_functions__float_type__rep
 use        Ada__numerics__elementary_functions__float_type
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Ada__numerics__elementary_functions__float_type.float_type, 
 predicate in_range = Ada__numerics__elementary_functions__float_type.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:52 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__sqrt__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 52 0 0#"model" "model_trace:7740" "name:X" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:52 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__sqrt__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "sqrt" defined at a-ngelfu.ads:52 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__sqrt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function sqrt 
   (x : Float32.t) : Float32.t
 
 predicate sqrt__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:75 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__log__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 75 0 0#"model" "name:X" "model_trace:7776" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:75 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__log__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "log" defined at a-ngelfu.ads:75 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__log
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function log 
   (x : Float32.t) : Float32.t
 
 predicate log__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:79 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__log__2__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 79 0 0#"model" "name:X" "model_trace:7820" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:79 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__log__2__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "base" defined at a-ngelfu.ads:79 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__log__2__base
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function base #"a-ngelfu.ads" 79 0 0#"model" "model_trace:7830" "name:Base" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "base" defined at a-ngelfu.ads:79 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__log__2__base___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "log__2" defined at a-ngelfu.ads:79 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__log__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function log__2 
   (x : Float32.t) (base : Float32.t) : Float32.t
 
 predicate log__2__function_guard 
   (result : Float32.t) (x : Float32.t) (base : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:83 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__exp__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 83 0 0#"model" "name:X" "model_trace:7861" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:83 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__exp__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "exp" defined at a-ngelfu.ads:83 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__exp
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function exp 
   (x : Float32.t) : Float32.t
 
 predicate exp__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "left" defined at a-ngelfu.ads:86 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__Oexpon__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function left #"a-ngelfu.ads" 86 0 0#"model" "model_trace:7937" "name:Left" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at a-ngelfu.ads:86 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__Oexpon__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at a-ngelfu.ads:86 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__Oexpon__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function right #"a-ngelfu.ads" 86 0 0#"model" "model_trace:7947" "name:Right" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at a-ngelfu.ads:86 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__Oexpon__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oexpon" defined at a-ngelfu.ads:86 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__Oexpon
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function oexpon 
   (left : Float32.t) (right : Float32.t) : Float32.t
 
 predicate oexpon__function_guard 
   (result : Float32.t) (left : Float32.t) (right : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:94 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__sin__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 94 0 0#"model" "name:X" "model_trace:7986" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:94 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__sin__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "sin" defined at a-ngelfu.ads:94 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__sin
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function sin 
   (x : Float32.t) : Float32.t
 
 predicate sin__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:98 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__sin__2__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 98 0 0#"model" "name:X" "model_trace:8030" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:98 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__sin__2__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "cycle" defined at a-ngelfu.ads:98 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__sin__2__cycle
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cycle #"a-ngelfu.ads" 98 0 0#"model" "model_trace:8040" "name:Cycle" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cycle" defined at a-ngelfu.ads:98 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__sin__2__cycle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "sin__2" defined at a-ngelfu.ads:98 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__sin__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function sin__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
 
 predicate sin__2__function_guard 
   (result : Float32.t) (x : Float32.t) (cycle : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:103 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__cos__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 103 0 0#"model" "name:X" "model_trace:8079" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:103 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__cos__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "cos" defined at a-ngelfu.ads:103 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__cos
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cos 
   (x : Float32.t) : Float32.t
 
 predicate cos__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:107 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__cos__2__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 107 0 0#"model" "name:X" "model_trace:8123" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:107 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__cos__2__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "cycle" defined at a-ngelfu.ads:107 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__cos__2__cycle
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cycle #"a-ngelfu.ads" 107 0 0#"model" "name:Cycle" "model_trace:8133" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cycle" defined at a-ngelfu.ads:107 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__cos__2__cycle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "cos__2" defined at a-ngelfu.ads:107 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__cos__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cos__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
 
 predicate cos__2__function_guard 
   (result : Float32.t) (x : Float32.t) (cycle : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:112 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__tan__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 112 0 0#"model" "name:X" "model_trace:8164" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:112 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__tan__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tan" defined at a-ngelfu.ads:112 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__tan
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function tan 
   (x : Float32.t) : Float32.t
 
 predicate tan__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:115 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__tan__2__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 115 0 0#"model" "name:X" "model_trace:8211" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:115 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__tan__2__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "cycle" defined at a-ngelfu.ads:115 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__tan__2__cycle
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cycle #"a-ngelfu.ads" 115 0 0#"model" "name:Cycle" "model_trace:8221" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cycle" defined at a-ngelfu.ads:115 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__tan__2__cycle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tan__2" defined at a-ngelfu.ads:115 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__tan__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function tan__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
 
 predicate tan__2__function_guard 
   (result : Float32.t) (x : Float32.t) (cycle : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:120 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__cot__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 120 0 0#"model" "name:X" "model_trace:8247" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:120 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__cot__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "cot" defined at a-ngelfu.ads:120 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__cot
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cot 
   (x : Float32.t) : Float32.t
 
 predicate cot__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:123 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__cot__2__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 123 0 0#"model" "name:X" "model_trace:8296" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:123 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__cot__2__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "cycle" defined at a-ngelfu.ads:123 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__cot__2__cycle
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cycle #"a-ngelfu.ads" 123 0 0#"model" "name:Cycle" "model_trace:8306" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cycle" defined at a-ngelfu.ads:123 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__cot__2__cycle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "cot__2" defined at a-ngelfu.ads:123 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__cot__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cot__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
 
 predicate cot__2__function_guard 
   (result : Float32.t) (x : Float32.t) (cycle : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:129 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arcsin__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 129 0 0#"model" "name:X" "model_trace:8343" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:129 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arcsin__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arcsin" defined at a-ngelfu.ads:129 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arcsin
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arcsin 
   (x : Float32.t) : Float32.t
 
 predicate arcsin__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:133 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arcsin__2__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 133 0 0#"model" "name:X" "model_trace:8384" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:133 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arcsin__2__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "cycle" defined at a-ngelfu.ads:133 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arcsin__2__cycle
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cycle #"a-ngelfu.ads" 133 0 0#"model" "name:Cycle" "model_trace:8394" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cycle" defined at a-ngelfu.ads:133 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arcsin__2__cycle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arcsin__2" defined at a-ngelfu.ads:133 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arcsin__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arcsin__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
 
 predicate arcsin__2__function_guard 
   (result : Float32.t) (x : Float32.t) (cycle : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:137 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arccos__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 137 0 0#"model" "name:X" "model_trace:8431" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:137 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arccos__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arccos" defined at a-ngelfu.ads:137 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arccos
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arccos 
   (x : Float32.t) : Float32.t
 
 predicate arccos__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:141 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arccos__2__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 141 0 0#"model" "name:X" "model_trace:8472" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:141 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arccos__2__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "cycle" defined at a-ngelfu.ads:141 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arccos__2__cycle
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cycle #"a-ngelfu.ads" 141 0 0#"model" "name:Cycle" "model_trace:8482" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cycle" defined at a-ngelfu.ads:141 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arccos__2__cycle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arccos__2" defined at a-ngelfu.ads:141 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arccos__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arccos__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
 
 predicate arccos__2__function_guard 
   (result : Float32.t) (x : Float32.t) (cycle : Float32.t) 

end

(* Module for defining the constant "y" defined at a-ngelfu.ads:146 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arctan__y
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function y #"a-ngelfu.ads" 146 0 0#"model" "model_trace:8526" "name:Y" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "y" defined at a-ngelfu.ads:146 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arctan__y___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "x" defined at a-ngelfu.ads:147 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arctan__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 147 0 0#"model" "name:X" "model_trace:8536" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:147 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arctan__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arctan" defined at a-ngelfu.ads:145 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arctan
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arctan 
   (y : Float32.t) (x : Float32.t) : Float32.t
 
 predicate arctan__function_guard 
   (result : Float32.t) (y : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "y" defined at a-ngelfu.ads:153 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arctan__2__y
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function y #"a-ngelfu.ads" 153 0 0#"model" "name:Y" "model_trace:8585" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "y" defined at a-ngelfu.ads:153 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arctan__2__y___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "x" defined at a-ngelfu.ads:154 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arctan__2__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 154 0 0#"model" "name:X" "model_trace:8595" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:154 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arctan__2__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "cycle" defined at a-ngelfu.ads:155 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arctan__2__cycle
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cycle #"a-ngelfu.ads" 155 0 0#"model" "name:Cycle" "model_trace:8606" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cycle" defined at a-ngelfu.ads:155 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arctan__2__cycle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arctan__2" defined at a-ngelfu.ads:152 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arctan__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arctan__2 
   (y : Float32.t) (x : Float32.t) (cycle : Float32.t) : Float32.t
 
 predicate arctan__2__function_guard 
   (result : Float32.t) (y : Float32.t) (x : Float32.t) (cycle : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:161 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arccot__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 161 0 0#"model" "name:X" "model_trace:8650" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:161 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arccot__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "y" defined at a-ngelfu.ads:162 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arccot__y
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function y #"a-ngelfu.ads" 162 0 0#"model" "name:Y" "model_trace:8660" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "y" defined at a-ngelfu.ads:162 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arccot__y___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arccot" defined at a-ngelfu.ads:160 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arccot
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arccot 
   (x : Float32.t) (y : Float32.t) : Float32.t
 
 predicate arccot__function_guard 
   (result : Float32.t) (x : Float32.t) (y : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:168 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arccot__2__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 168 0 0#"model" "name:X" "model_trace:8709" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:168 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arccot__2__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "y" defined at a-ngelfu.ads:169 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arccot__2__y
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function y #"a-ngelfu.ads" 169 0 0#"model" "name:Y" "model_trace:8719" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "y" defined at a-ngelfu.ads:169 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arccot__2__y___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "cycle" defined at a-ngelfu.ads:170 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arccot__2__cycle
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cycle #"a-ngelfu.ads" 170 0 0#"model" "name:Cycle" "model_trace:8730" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "cycle" defined at a-ngelfu.ads:170 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arccot__2__cycle___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arccot__2" defined at a-ngelfu.ads:167 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arccot__2
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arccot__2 
   (x : Float32.t) (y : Float32.t) (cycle : Float32.t) : Float32.t
 
 predicate arccot__2__function_guard 
   (result : Float32.t) (x : Float32.t) (y : Float32.t) (cycle : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:175 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__sinh__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 175 0 0#"model" "name:X" "model_trace:8761" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:175 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__sinh__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "sinh" defined at a-ngelfu.ads:175 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__sinh
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function sinh 
   (x : Float32.t) : Float32.t
 
 predicate sinh__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:178 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__cosh__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 178 0 0#"model" "name:X" "model_trace:8797" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:178 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__cosh__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "cosh" defined at a-ngelfu.ads:178 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__cosh
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function cosh 
   (x : Float32.t) : Float32.t
 
 predicate cosh__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:182 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__tanh__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 182 0 0#"model" "name:X" "model_trace:8836" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:182 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__tanh__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "tanh" defined at a-ngelfu.ads:182 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__tanh
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function tanh 
   (x : Float32.t) : Float32.t
 
 predicate tanh__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:186 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__coth__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 186 0 0#"model" "name:X" "model_trace:8869" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:186 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__coth__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "coth" defined at a-ngelfu.ads:186 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__coth
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function coth 
   (x : Float32.t) : Float32.t
 
 predicate coth__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:190 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arcsinh__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 190 0 0#"model" "name:X" "model_trace:8900" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:190 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arcsinh__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arcsinh" defined at a-ngelfu.ads:190 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arcsinh
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arcsinh 
   (x : Float32.t) : Float32.t
 
 predicate arcsinh__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:193 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arccosh__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 193 0 0#"model" "name:X" "model_trace:8941" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:193 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arccosh__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arccosh" defined at a-ngelfu.ads:193 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arccosh
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arccosh 
   (x : Float32.t) : Float32.t
 
 predicate arccosh__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:198 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arctanh__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 198 0 0#"model" "name:X" "model_trace:8978" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:198 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arctanh__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arctanh" defined at a-ngelfu.ads:198 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arctanh
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arctanh 
   (x : Float32.t) : Float32.t
 
 predicate arctanh__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "x" defined at a-ngelfu.ads:202 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__numerics__elementary_functions__arccoth__x
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function x #"a-ngelfu.ads" 202 0 0#"model" "name:X" "model_trace:9005" 
   : Float32.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "x" defined at a-ngelfu.ads:202 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__numerics__elementary_functions__arccoth__x___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "arccoth" defined at a-ngelfu.ads:202 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__numerics__elementary_functions__arccoth
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 function arccoth 
   (x : Float32.t) : Float32.t
 
 predicate arccoth__function_guard 
   (result : Float32.t) (x : Float32.t) 

end

(* Module for defining the constant "n" defined at prime.ads:2, created in Gnat2Why.Decls.Translate_Constant *)
module Prime__isprime__n
 use import "_gnatprove_standard".Main

 function n #"prime.ads" 2 0 0#"model" "model_trace:2482" "name:N" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "n" defined at prime.ads:2, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Prime__isprime__n___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T4s" defined at prime.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Prime__isprime__L3s__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t4s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4s__ref =
  { mutable t4s__content "model_trace:" "name:" : t4s }
 
 function t4s__ref___projection 
   (a : t4s__ref) : t4s =
  a.t4s__content
 
 meta "model_projection" function t4s__ref___projection
 
 meta "inline : no" function t4s__ref___projection
 
 val t4s__havoc 
   (x : t4s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6s" defined at prime.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Prime__isprime__L5s__T6s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t6s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t6s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6s__ref =
  { mutable t6s__content "model_trace:" "name:" : t6s }
 
 function t6s__ref___projection 
   (a : t6s__ref) : t6s =
  a.t6s__content
 
 meta "model_projection" function t6s__ref___projection
 
 meta "inline : no" function t6s__ref___projection
 
 val t6s__havoc 
   (x : t6s__ref) : unit
  writes {x}

end

(* Module for possibly declaring a logic function for "isprime" defined at prime.ads:2, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Prime__isprime
 use import "_gnatprove_standard".Main

 function isprime 
   (n : int) : bool
 
 predicate isprime__function_guard 
   (result : bool) (n : int) 

end

(* Module for axiomatizing type "T4b" defined at prime.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Prime__isprime__L_1__L3b__T4b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t4b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4b__ref =
  { mutable t4b__content "model_trace:" "name:" : t4b }
 
 function t4b__ref___projection 
   (a : t4b__ref) : t4b =
  a.t4b__content
 
 meta "model_projection" function t4b__ref___projection
 
 meta "inline : no" function t4b__ref___projection
 
 val t4b__havoc 
   (x : t4b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at prime.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Prime__isprime__L_1__L1b__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content "model_trace:" "name:" : t2b }
 
 function t2b__ref___projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref___projection
 
 meta "inline : no" function t2b__ref___projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T6b" defined at prime.adb:12, created in Gnat2Why.Types.Translate_Type *)
module Prime__isprime__L_1__L5b__T6b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t6b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t6b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t6b__ref =
  { mutable t6b__content "model_trace:" "name:" : t6b }
 
 function t6b__ref___projection 
   (a : t6b__ref) : t6b =
  a.t6b__content
 
 meta "model_projection" function t6b__ref___projection
 
 meta "inline : no" function t6b__ref___projection
 
 val t6b__havoc 
   (x : t6b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T9b" defined at prime.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Prime__isprime__L8b__T9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t9b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t9b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t9b__ref =
  { mutable t9b__content "model_trace:" "name:" : t9b }
 
 function t9b__ref___projection 
   (a : t9b__ref) : t9b =
  a.t9b__content
 
 meta "model_projection" function t9b__ref___projection
 
 meta "inline : no" function t9b__ref___projection
 
 val t9b__havoc 
   (x : t9b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "i" defined at prime.adb:5, created in Gnat2Why.Decls.Translate_Variable *)
module Prime__isprime__i
 use import "_gnatprove_standard".Main

 val i #"prime.adb" 5 0 0#"model_projected" "model_trace:2338" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at prime.adb:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Prime__isprime__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for defining the loop exit exception for the loop "L_1" defined at prime.adb:8, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Prime__isprime__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at prime.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Prime__isprime__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "float_type" defined at a-ngelfu.ads:37 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada__numerics__elementary_functions__float_type___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Ada__numerics__elementary_functions__float_type

 predicate dynamic_invariant "inline" 
   (temp___expr_158 : Float32.t) (temp___is_init_154 : bool) (temp___skip_constant_155 : bool) (temp___do_toplevel_156 : bool) (temp___do_typ_inv_157 : bool)  =
  (if (( temp___is_init_154 \/ (Float32.le Ada__numerics__elementary_functions__float_type.first Ada__numerics__elementary_functions__float_type.last) )) then (
   (Ada__numerics__elementary_functions__float_type.dynamic_property Ada__numerics__elementary_functions__float_type.first Ada__numerics__elementary_functions__float_type.last temp___expr_158)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_159 : Float32.t) (temp___skip_top_level_160 : bool)  =
  true

end

(* Module giving axioms for type "T4s" defined at prime.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Prime__isprime__L3s__T4s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T6s" defined at prime.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Prime__isprime__L5s__T6s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4b" defined at prime.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Prime__isprime__L_1__L3b__T4b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T2b" defined at prime.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Prime__isprime__L_1__L1b__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T6b" defined at prime.adb:12, created in Gnat2Why.Types.Generate_Type_Completion *)
module Prime__isprime__L_1__L5b__T6b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T9b" defined at prime.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Prime__isprime__L8b__T9b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for declaring a program function (and possibly an axiom) for "sqrt" defined at a-ngelfu.ads:52 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__sqrt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__sqrt

 val sqrt 
   (x : Float32.t) : Float32.t
  requires {  (Float32.ge x (0.0E-1:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__sqrt.sqrt x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ ( (Float32.ge result (0.0E-1:Float32.t)) /\ ( (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) /\ ( (if ((Float32.eq x (1.0:Float32.t))) then (
   (Float32.eq result (1.0:Float32.t))) else (
   true)) /\ (if ((Float32.ge x (0.0000000000000000000000000000000000000000000014012984643248170709237295832899161312802619418765157717570682838897910826858606014866381883621215820312500000000000000000000000:Float32.t))) then (
   (Float32.gt result (0.0E-1:Float32.t))) else (
   true)) ) ) ) ) ) }
 
 axiom sqrt__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__sqrt.sqrt x)].
   ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Float32.ge x (0.0E-1:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__sqrt.sqrt x) in (
    ( ( ( (Float32.ge result (0.0E-1:Float32.t)) /\ ( (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ ( (if ((Float32.eq x (1.0:Float32.t))) then (
     (Float32.eq result (1.0:Float32.t))) else (
     true)) /\ (if ((Float32.ge x (0.0000000000000000000000000000000000000000000014012984643248170709237295832899161312802619418765157717570682838897910826858606014866381883621215820312500000000000000000000000:Float32.t))) then (
     (Float32.gt result (0.0E-1:Float32.t))) else (
     true)) ) ) ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "log" defined at a-ngelfu.ads:75 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__log___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__log

 val log 
   (x : Float32.t) : Float32.t
  requires {  (Float32.gt x (0.0E-1:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__log.log x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (1.0:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom log__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__log.log x)].
   ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Float32.gt x (0.0E-1:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__log.log x) in (
    ( ( (if ((Float32.eq x (1.0:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "log__2" defined at a-ngelfu.ads:79 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__log__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__log__2

 val log__2 
   (x : Float32.t) (base : Float32.t) : Float32.t
  requires {  ( ( (Float32.gt x (0.0E-1:Float32.t)) /\ (Float32.gt base (0.0E-1:Float32.t)) ) /\ (Float32.neq base (1.0:Float32.t)) ) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__log__2.log__2 x base)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (1.0:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom log__2__post_axiom :
  (forall x   base   : Float32.t [(Ada__numerics__elementary_functions__log__2.log__2 x base)].
   ( ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Standard__float___axiom.dynamic_invariant base True True True True) ) /\ ( ( (Float32.gt x (0.0E-1:Float32.t)) /\ (Float32.gt base (0.0E-1:Float32.t)) ) /\ (Float32.neq base (1.0:Float32.t)) ) ) -> (let result = (Ada__numerics__elementary_functions__log__2.log__2 x base) in (
    ( ( (if ((Float32.eq x (1.0:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "exp" defined at a-ngelfu.ads:83 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__exp___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__exp

 val exp 
   (x : Float32.t) : Float32.t
  requires {  true }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__exp.exp x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (1.0:Float32.t))) else (
   true)) ) ) }
 
 axiom exp__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__exp.exp x)].
   ( (Standard__float___axiom.dynamic_invariant x True True True True) -> (let result = (Ada__numerics__elementary_functions__exp.exp x) in (
    ( ( (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (1.0:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oexpon" defined at a-ngelfu.ads:86 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__Oexpon___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__Oexpon

 val oexpon 
   (left : Float32.t) (right : Float32.t) : Float32.t
  requires {  ( (if ((Float32.eq left (0.0E-1:Float32.t))) then (
   (Float32.gt right (0.0E-1:Float32.t))) else (
   true)) /\ (Float32.ge left (0.0E-1:Float32.t)) ) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__Oexpon.oexpon left right)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ ( (Float32.ge result (0.0E-1:Float32.t)) /\ ( (if ((Float32.eq right (0.0E-1:Float32.t))) then (
   (Float32.eq result (1.0:Float32.t))) else (
   true)) /\ ( (if ((Float32.eq right (1.0:Float32.t))) then (
   (Float32.eq result left)) else (
   true)) /\ ( (if ((Float32.eq left (1.0:Float32.t))) then (
   (Float32.eq result (1.0:Float32.t))) else (
   true)) /\ (if ((Float32.eq left (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) ) ) ) ) }
 
 axiom oexpon__post_axiom :
  (forall left   right   : Float32.t [(Ada__numerics__elementary_functions__Oexpon.oexpon left right)].
   ( ( ( (Standard__float___axiom.dynamic_invariant left True True True True) /\ (Standard__float___axiom.dynamic_invariant right True True True True) ) /\ ( (if ((Float32.eq left (0.0E-1:Float32.t))) then (
    (Float32.gt right (0.0E-1:Float32.t))) else (
    true)) /\ (Float32.ge left (0.0E-1:Float32.t)) ) ) -> (let result = (Ada__numerics__elementary_functions__Oexpon.oexpon left right) in (
    ( ( ( (Float32.ge result (0.0E-1:Float32.t)) /\ ( (if ((Float32.eq right (0.0E-1:Float32.t))) then (
     (Float32.eq result (1.0:Float32.t))) else (
     true)) /\ ( (if ((Float32.eq right (1.0:Float32.t))) then (
     (Float32.eq result left)) else (
     true)) /\ ( (if ((Float32.eq left (1.0:Float32.t))) then (
     (Float32.eq result (1.0:Float32.t))) else (
     true)) /\ (if ((Float32.eq left (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) ) ) ) ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "sin" defined at a-ngelfu.ads:94 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__sin___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__sin

 val sin 
   (x : Float32.t) : Float32.t
  requires {  true }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__sin.sin x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ ( ( (Float32.le (Float32.neg (1.0:Float32.t)) result) /\ (Float32.le result (1.0:Float32.t)) ) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) ) }
 
 axiom sin__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__sin.sin x)].
   ( (Standard__float___axiom.dynamic_invariant x True True True True) -> (let result = (Ada__numerics__elementary_functions__sin.sin x) in (
    ( ( ( ( (Float32.le (Float32.neg (1.0:Float32.t)) result) /\ (Float32.le result (1.0:Float32.t)) ) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "sin__2" defined at a-ngelfu.ads:98 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__sin__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__sin__2

 val sin__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
  requires {  (Float32.gt cycle (0.0E-1:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__sin__2.sin__2 x cycle)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ ( ( (Float32.le (Float32.neg (1.0:Float32.t)) result) /\ (Float32.le result (1.0:Float32.t)) ) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) ) }
 
 axiom sin__2__post_axiom :
  (forall x   cycle   : Float32.t [(Ada__numerics__elementary_functions__sin__2.sin__2 x cycle)].
   ( ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Standard__float___axiom.dynamic_invariant cycle True True True True) ) /\ (Float32.gt cycle (0.0E-1:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__sin__2.sin__2 x cycle) in (
    ( ( ( ( (Float32.le (Float32.neg (1.0:Float32.t)) result) /\ (Float32.le result (1.0:Float32.t)) ) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "cos" defined at a-ngelfu.ads:103 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__cos___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__cos

 val cos 
   (x : Float32.t) : Float32.t
  requires {  true }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__cos.cos x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ ( ( (Float32.le (Float32.neg (1.0:Float32.t)) result) /\ (Float32.le result (1.0:Float32.t)) ) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (1.0:Float32.t))) else (
   true)) ) ) ) }
 
 axiom cos__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__cos.cos x)].
   ( (Standard__float___axiom.dynamic_invariant x True True True True) -> (let result = (Ada__numerics__elementary_functions__cos.cos x) in (
    ( ( ( ( (Float32.le (Float32.neg (1.0:Float32.t)) result) /\ (Float32.le result (1.0:Float32.t)) ) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (1.0:Float32.t))) else (
     true)) ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "cos__2" defined at a-ngelfu.ads:107 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__cos__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__cos__2

 val cos__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
  requires {  (Float32.gt cycle (0.0E-1:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__cos__2.cos__2 x cycle)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ ( ( (Float32.le (Float32.neg (1.0:Float32.t)) result) /\ (Float32.le result (1.0:Float32.t)) ) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (1.0:Float32.t))) else (
   true)) ) ) ) }
 
 axiom cos__2__post_axiom :
  (forall x   cycle   : Float32.t [(Ada__numerics__elementary_functions__cos__2.cos__2 x cycle)].
   ( ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Standard__float___axiom.dynamic_invariant cycle True True True True) ) /\ (Float32.gt cycle (0.0E-1:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__cos__2.cos__2 x cycle) in (
    ( ( ( ( (Float32.le (Float32.neg (1.0:Float32.t)) result) /\ (Float32.le result (1.0:Float32.t)) ) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (1.0:Float32.t))) else (
     true)) ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "tan" defined at a-ngelfu.ads:112 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__tan___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__tan

 val tan 
   (x : Float32.t) : Float32.t
  requires {  true }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__tan.tan x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom tan__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__tan.tan x)].
   ( (Standard__float___axiom.dynamic_invariant x True True True True) -> (let result = (Ada__numerics__elementary_functions__tan.tan x) in (
    ( ( (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "tan__2" defined at a-ngelfu.ads:115 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__tan__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__tan__2

 val tan__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
  requires {  ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ (Float32.neq (Float32.abs (Float32.rem x cycle)) (Float32.mul_rne (0.2500000000000000000000000:Float32.t) cycle)) ) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__tan__2.tan__2 x cycle)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom tan__2__post_axiom :
  (forall x   cycle   : Float32.t [(Ada__numerics__elementary_functions__tan__2.tan__2 x cycle)].
   ( ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Standard__float___axiom.dynamic_invariant cycle True True True True) ) /\ ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ (Float32.neq (Float32.abs (Float32.rem x cycle)) (Float32.mul_rne (0.2500000000000000000000000:Float32.t) cycle)) ) ) -> (let result = (Ada__numerics__elementary_functions__tan__2.tan__2 x cycle) in (
    ( ( (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "cot" defined at a-ngelfu.ads:120 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__cot___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__cot

 val cot 
   (x : Float32.t) : Float32.t
  requires {  (Float32.neq x (0.0E-1:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__cot.cot x)) /\ true ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) }
 
 axiom cot__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__cot.cot x)].
   ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Float32.neq x (0.0E-1:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__cot.cot x) in (
    ( ( true /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "cot__2" defined at a-ngelfu.ads:123 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__cot__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__cot__2

 val cot__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
  requires {  ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ ( (Float32.neq x (0.0E-1:Float32.t)) /\ ( (Float32.neq (Float32.rem x cycle) (0.0E-1:Float32.t)) /\ (Float32.eq (Float32.abs (Float32.rem x cycle)) (Float32.mul_rne (0.500000000000000000000000:Float32.t) cycle)) ) ) ) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__cot__2.cot__2 x cycle)) /\ true ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) }
 
 axiom cot__2__post_axiom :
  (forall x   cycle   : Float32.t [(Ada__numerics__elementary_functions__cot__2.cot__2 x cycle)].
   ( ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Standard__float___axiom.dynamic_invariant cycle True True True True) ) /\ ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ ( (Float32.neq x (0.0E-1:Float32.t)) /\ ( (Float32.neq (Float32.rem x cycle) (0.0E-1:Float32.t)) /\ (Float32.eq (Float32.abs (Float32.rem x cycle)) (Float32.mul_rne (0.500000000000000000000000:Float32.t) cycle)) ) ) ) ) -> (let result = (Ada__numerics__elementary_functions__cot__2.cot__2 x cycle) in (
    ( ( true /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arcsin" defined at a-ngelfu.ads:129 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arcsin___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arcsin

 val arcsin 
   (x : Float32.t) : Float32.t
  requires {  (Float32.le (Float32.abs x) (1.0:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arcsin.arcsin x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom arcsin__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__arcsin.arcsin x)].
   ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Float32.le (Float32.abs x) (1.0:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__arcsin.arcsin x) in (
    ( ( (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arcsin__2" defined at a-ngelfu.ads:133 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arcsin__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arcsin__2

 val arcsin__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
  requires {  ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ (Float32.le (Float32.abs x) (1.0:Float32.t)) ) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arcsin__2.arcsin__2 x cycle)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom arcsin__2__post_axiom :
  (forall x   cycle   : Float32.t [(Ada__numerics__elementary_functions__arcsin__2.arcsin__2 x cycle)].
   ( ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Standard__float___axiom.dynamic_invariant cycle True True True True) ) /\ ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ (Float32.le (Float32.abs x) (1.0:Float32.t)) ) ) -> (let result = (Ada__numerics__elementary_functions__arcsin__2.arcsin__2 x cycle) in (
    ( ( (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arccos" defined at a-ngelfu.ads:137 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arccos___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arccos

 val arccos 
   (x : Float32.t) : Float32.t
  requires {  (Float32.le (Float32.abs x) (1.0:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arccos.arccos x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (1.0:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom arccos__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__arccos.arccos x)].
   ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Float32.le (Float32.abs x) (1.0:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__arccos.arccos x) in (
    ( ( (if ((Float32.eq x (1.0:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arccos__2" defined at a-ngelfu.ads:141 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arccos__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arccos__2

 val arccos__2 
   (x : Float32.t) (cycle : Float32.t) : Float32.t
  requires {  ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ (Float32.le (Float32.abs x) (1.0:Float32.t)) ) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arccos__2.arccos__2 x cycle)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (1.0:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom arccos__2__post_axiom :
  (forall x   cycle   : Float32.t [(Ada__numerics__elementary_functions__arccos__2.arccos__2 x cycle)].
   ( ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Standard__float___axiom.dynamic_invariant cycle True True True True) ) /\ ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ (Float32.le (Float32.abs x) (1.0:Float32.t)) ) ) -> (let result = (Ada__numerics__elementary_functions__arccos__2.arccos__2 x cycle) in (
    ( ( (if ((Float32.eq x (1.0:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arctan" defined at a-ngelfu.ads:145 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arctan___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arctan

 val arctan 
   (y : Float32.t) (x : Float32.t) : Float32.t
  requires {  ( (Float32.neq x (0.0E-1:Float32.t)) \/ (Float32.neq y (0.0E-1:Float32.t)) ) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arctan.arctan y x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if (( (Float32.gt x (0.0E-1:Float32.t)) /\ (Float32.eq y (0.0E-1:Float32.t)) )) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom arctan__post_axiom :
  (forall y   x   : Float32.t [(Ada__numerics__elementary_functions__arctan.arctan y x)].
   ( ( ( (Standard__float___axiom.dynamic_invariant y True True True True) /\ (Standard__float___axiom.dynamic_invariant x True True True True) ) /\ ( (Float32.neq x (0.0E-1:Float32.t)) \/ (Float32.neq y (0.0E-1:Float32.t)) ) ) -> (let result = (Ada__numerics__elementary_functions__arctan.arctan y x) in (
    ( ( (if (( (Float32.gt x (0.0E-1:Float32.t)) /\ (Float32.eq y (0.0E-1:Float32.t)) )) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arctan__2" defined at a-ngelfu.ads:152 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arctan__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arctan__2

 val arctan__2 
   (y : Float32.t) (x : Float32.t) (cycle : Float32.t) : Float32.t
  requires {  ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ ( (Float32.neq x (0.0E-1:Float32.t)) \/ (Float32.neq y (0.0E-1:Float32.t)) ) ) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arctan__2.arctan__2 y x cycle)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if (( (Float32.gt x (0.0E-1:Float32.t)) /\ (Float32.eq y (0.0E-1:Float32.t)) )) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom arctan__2__post_axiom :
  (forall y   x   cycle   : Float32.t [(Ada__numerics__elementary_functions__arctan__2.arctan__2 y x cycle)].
   ( ( ( ( (Standard__float___axiom.dynamic_invariant y True True True True) /\ (Standard__float___axiom.dynamic_invariant x True True True True) ) /\ (Standard__float___axiom.dynamic_invariant cycle True True True True) ) /\ ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ ( (Float32.neq x (0.0E-1:Float32.t)) \/ (Float32.neq y (0.0E-1:Float32.t)) ) ) ) -> (let result = (Ada__numerics__elementary_functions__arctan__2.arctan__2 y x cycle) in (
    ( ( (if (( (Float32.gt x (0.0E-1:Float32.t)) /\ (Float32.eq y (0.0E-1:Float32.t)) )) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arccot" defined at a-ngelfu.ads:160 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arccot___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arccot

 val arccot 
   (x : Float32.t) (y : Float32.t) : Float32.t
  requires {  ( (Float32.neq x (0.0E-1:Float32.t)) \/ (Float32.neq y (0.0E-1:Float32.t)) ) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arccot.arccot x y)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if (( (Float32.gt x (0.0E-1:Float32.t)) /\ (Float32.eq y (0.0E-1:Float32.t)) )) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom arccot__post_axiom :
  (forall x   y   : Float32.t [(Ada__numerics__elementary_functions__arccot.arccot x y)].
   ( ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Standard__float___axiom.dynamic_invariant y True True True True) ) /\ ( (Float32.neq x (0.0E-1:Float32.t)) \/ (Float32.neq y (0.0E-1:Float32.t)) ) ) -> (let result = (Ada__numerics__elementary_functions__arccot.arccot x y) in (
    ( ( (if (( (Float32.gt x (0.0E-1:Float32.t)) /\ (Float32.eq y (0.0E-1:Float32.t)) )) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arccot__2" defined at a-ngelfu.ads:167 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arccot__2___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arccot__2

 val arccot__2 
   (x : Float32.t) (y : Float32.t) (cycle : Float32.t) : Float32.t
  requires {  ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ ( (Float32.neq x (0.0E-1:Float32.t)) \/ (Float32.neq y (0.0E-1:Float32.t)) ) ) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arccot__2.arccot__2 x y cycle)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if (( (Float32.gt x (0.0E-1:Float32.t)) /\ (Float32.eq y (0.0E-1:Float32.t)) )) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom arccot__2__post_axiom :
  (forall x   y   cycle   : Float32.t [(Ada__numerics__elementary_functions__arccot__2.arccot__2 x y cycle)].
   ( ( ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Standard__float___axiom.dynamic_invariant y True True True True) ) /\ (Standard__float___axiom.dynamic_invariant cycle True True True True) ) /\ ( (Float32.gt cycle (0.0E-1:Float32.t)) /\ ( (Float32.neq x (0.0E-1:Float32.t)) \/ (Float32.neq y (0.0E-1:Float32.t)) ) ) ) -> (let result = (Ada__numerics__elementary_functions__arccot__2.arccot__2 x y cycle) in (
    ( ( (if (( (Float32.gt x (0.0E-1:Float32.t)) /\ (Float32.eq y (0.0E-1:Float32.t)) )) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "sinh" defined at a-ngelfu.ads:175 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__sinh___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__sinh

 val sinh 
   (x : Float32.t) : Float32.t
  requires {  true }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__sinh.sinh x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom sinh__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__sinh.sinh x)].
   ( (Standard__float___axiom.dynamic_invariant x True True True True) -> (let result = (Ada__numerics__elementary_functions__sinh.sinh x) in (
    ( ( (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "cosh" defined at a-ngelfu.ads:178 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__cosh___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__cosh

 val cosh 
   (x : Float32.t) : Float32.t
  requires {  true }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__cosh.cosh x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ ( (Float32.ge result (1.0:Float32.t)) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (1.0:Float32.t))) else (
   true)) ) ) ) }
 
 axiom cosh__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__cosh.cosh x)].
   ( (Standard__float___axiom.dynamic_invariant x True True True True) -> (let result = (Ada__numerics__elementary_functions__cosh.cosh x) in (
    ( ( ( (Float32.ge result (1.0:Float32.t)) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (1.0:Float32.t))) else (
     true)) ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "tanh" defined at a-ngelfu.ads:182 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__tanh___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__tanh

 val tanh 
   (x : Float32.t) : Float32.t
  requires {  true }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__tanh.tanh x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ ( ( (Float32.le (Float32.neg (1.0:Float32.t)) result) /\ (Float32.le result (1.0:Float32.t)) ) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) ) }
 
 axiom tanh__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__tanh.tanh x)].
   ( (Standard__float___axiom.dynamic_invariant x True True True True) -> (let result = (Ada__numerics__elementary_functions__tanh.tanh x) in (
    ( ( ( ( (Float32.le (Float32.neg (1.0:Float32.t)) result) /\ (Float32.le result (1.0:Float32.t)) ) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "coth" defined at a-ngelfu.ads:186 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__coth___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__coth

 val coth 
   (x : Float32.t) : Float32.t
  requires {  (Float32.neq x (0.0E-1:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__coth.coth x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (Float32.ge (Float32.abs result) (1.0:Float32.t)) ) ) }
 
 axiom coth__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__coth.coth x)].
   ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Float32.neq x (0.0E-1:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__coth.coth x) in (
    ( ( (Float32.ge (Float32.abs result) (1.0:Float32.t)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arcsinh" defined at a-ngelfu.ads:190 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arcsinh___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arcsinh

 val arcsinh 
   (x : Float32.t) : Float32.t
  requires {  true }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arcsinh.arcsinh x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom arcsinh__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__arcsinh.arcsinh x)].
   ( (Standard__float___axiom.dynamic_invariant x True True True True) -> (let result = (Ada__numerics__elementary_functions__arcsinh.arcsinh x) in (
    ( ( (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arccosh" defined at a-ngelfu.ads:193 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arccosh___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arccosh

 val arccosh 
   (x : Float32.t) : Float32.t
  requires {  (Float32.ge x (1.0:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arccosh.arccosh x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ ( (Float32.ge result (0.0E-1:Float32.t)) /\ (if ((Float32.eq x (1.0:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) ) }
 
 axiom arccosh__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__arccosh.arccosh x)].
   ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Float32.ge x (1.0:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__arccosh.arccosh x) in (
    ( ( ( (Float32.ge result (0.0E-1:Float32.t)) /\ (if ((Float32.eq x (1.0:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arctanh" defined at a-ngelfu.ads:198 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arctanh___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arctanh

 val arctanh 
   (x : Float32.t) : Float32.t
  requires {  (Float32.lt (Float32.abs x) (1.0:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arctanh.arctanh x)) /\ true ) /\ ( (Standard__float___axiom.dynamic_invariant result True False True True) /\ (if ((Float32.eq x (0.0E-1:Float32.t))) then (
   (Float32.eq result (0.0E-1:Float32.t))) else (
   true)) ) ) }
 
 axiom arctanh__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__arctanh.arctanh x)].
   ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Float32.lt (Float32.abs x) (1.0:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__arctanh.arctanh x) in (
    ( ( (if ((Float32.eq x (0.0E-1:Float32.t))) then (
     (Float32.eq result (0.0E-1:Float32.t))) else (
     true)) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "arccoth" defined at a-ngelfu.ads:202 instantiated at a-nuelfu.ads:18, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__numerics__elementary_functions__arccoth___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float___axiom
 use        Ada__numerics__elementary_functions__arccoth

 val arccoth 
   (x : Float32.t) : Float32.t
  requires {  (Float32.gt (Float32.abs x) (1.0:Float32.t)) }
  ensures {  ( ( (result = (Ada__numerics__elementary_functions__arccoth.arccoth x)) /\ true ) /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) }
 
 axiom arccoth__post_axiom :
  (forall x   : Float32.t [(Ada__numerics__elementary_functions__arccoth.arccoth x)].
   ( ( (Standard__float___axiom.dynamic_invariant x True True True True) /\ (Float32.gt (Float32.abs x) (1.0:Float32.t)) ) -> (let result = (Ada__numerics__elementary_functions__arccoth.arccoth x) in (
    ( ( true /\ (Standard__float___axiom.dynamic_invariant result True False True True) ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "isprime" defined at prime.ads:2, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Prime__isprime___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        Prime__isprime

 val isprime 
   (n : int) : bool
  requires {  (n >= 2) }
  ensures {  ( ( (result = (Prime__isprime.isprime n)) /\ (Prime__isprime.isprime__function_guard result n) ) /\ (if ((result = True)) then (
   (forall i   "model" "name:I" "model_trace:2507"  : int.
    ( ( (2 <= i) /\ (i <= (n - 1)) ) -> ((Int_Division.rem n i) <> 0) ))) else (
   (exists i  : int.
    ( ( (2 <= i) /\ (i <= (n - 1)) ) /\ ((Int_Division.rem n i) = 0) )))) ) }

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "prime" defined at prime.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Prime__package_def
 use import "_gnatprove_standard".Main

 let def #"prime.ads" 1 0 0#"GP_Subp:prime.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"prime.ads" 1 0 0# true }
  ensures { #"prime.ads" 1 0 0# true }
   =
  ( (#"prime.ads" 1 0 0# ());
  (#"prime.ads" 2 0 0# ());
  (#"prime.ads" 6 0 0# ());
  (#"prime.ads" 4 0 0# ());
  (#"prime.adb" 3 0 0# ());
  (#"prime.adb" 4 0 0# ());
  ( "GP_Sloc:prime.adb:20:1" (#"prime.adb" 20 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "isprime" defined at prime.ads:2, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Prime__isprime__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Int_Division
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Prime__isprime__n
 use        Prime__isprime__i
 use        Prime__isprime__L_1
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Prime__isprime__i___axiom
 use        Prime__isprime__L_1___axiom
 use        Prime__isprime__n___axiom

 val prime__isprime__result "model_projected" "model_trace:2475@result" "name:IsPrime"  : bool__ref 
 
 let def #"prime.ads" 2 0 0#"W:diverges:N" "GP_Subp:prime.ads:2" 
   (__void_param : unit)
  requires { #"prime.ads" 2 0 0# true }
  ensures { #"prime.ads" 2 0 0# (#"prime.ads" 6 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:prime.ads:6:16" "GP_Reason:VC_POSTCONDITION" "GP_Id:12" "comment:       Post => (if IsPrime'Result then
               ^ prime.ads:6:16:VC_POSTCONDITION" "GP_Shape:pragargs__if" (if ((prime__isprime__result.bool__content = True)) then (
   (forall i #"prime.ads" 6 0 0#  "model" "name:I" "model_trace:2507"  : int.
    ( ( (2 <= i) /\ (i <= (Prime__isprime__n.n - 1)) ) -> ( "GP_Pretty_Ada:2524" "GP_Sloc:prime.ads:7:47" ((Int_Division.rem Prime__isprime__n.n i) <> 0) ) ))) else (
   (exists i  : int.
    ( ( (2 <= i) /\ (i <= (Prime__isprime__n.n - 1)) ) /\ ( "GP_Pretty_Ada:2543" "GP_Sloc:prime.ads:9:48" ((Int_Division.rem Prime__isprime__n.n i) = 0) ) )))) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram prime.ads:2 *)
  ;
   assume {  (Standard__positive___axiom.dynamic_invariant Prime__isprime__n.n True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram prime.ads:2 *)
  ;
  () (* Check for RTE in the Pre of the subprogram prime.ads:2 *)
  ;
   abstract ensures {true}(let _ = (Prime__isprime__n.n >= 2) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram prime.ads:2 *)
  ;
   assume {  (Prime__isprime__n.n >= 2) };
   try
   ( (#"prime.adb" 5 0 0# ( #"prime.adb" 5 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"prime.adb" 5 0 0# assume { #"prime.adb" 5 0 0# (Standard__integer___axiom.default_initial_assumption Prime__isprime__i.i.int__content False) };
   #"prime.adb" 5 0 0# assume { #"prime.adb" 5 0 0# (Standard__integer___axiom.dynamic_invariant Prime__isprime__i.i.int__content False False True True) } ));
   (#"prime.adb" 8 0 0# ());
   ( "GP_Sloc:prime.adb:7:7" (#"prime.adb" 7 0 0# ()) );
   ( "GP_Sloc:prime.adb:7:9" (#"prime.adb" 7 0 0# #"prime.adb" 7 0 0# Prime__isprime__i.i.int__content <- ( 2 )) );
   ( "GP_Sloc:prime.adb:8:19" (#"prime.adb" 8 0 0# ( () (* Translation of an Ada loop from prime.adb:8 *)
   ;
   (if ((Prime__isprime__i.i.int__content < Prime__isprime__n.n)) then (
    #"prime.adb" 8 0 0# try
     ( #"prime.adb" 8 0 0# abstract ensures {true}(let _ = Prime__isprime__i.i.int__content in (
      ()))
      end ;
     (let temp___161 = #"prime.adb" 8 0 0# (any int
     ensures {#"prime.adb" 8 0 0# (result = Prime__isprime__i.i.int__content)} 
     ) in (
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop prime.adb:8 *)
      ;
      () (* While loop translating the Ada loop from prime.adb:8 *)
      ;
      #"prime.adb" 8 0 0# while True do
       invariant { 
        (#"prime.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:prime.adb:9:32" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:6" "comment:         pragma Loop_Invariant(for all J in 2 .. I - 1 => N rem J /= 0);
                               ^ prime.adb:9:32:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall j #"prime.adb" 9 0 0#  "model" "model_trace:2361" "name:J"  : int.
         ( ( (2 <= j) /\ (j <= (Prime__isprime__i.i.int__content - 1)) ) -> ( "GP_Pretty_Ada:2378" "GP_Sloc:prime.adb:9:59" ((Int_Division.rem Prime__isprime__n.n j) <> 0) ) )) ))
        }
       invariant { 
        (#"prime.adb" 10 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:prime.adb:10:32" "GP_Id:7" "comment:         pragma Loop_Invariant(I >= 2);  
                               ^ prime.adb:10:32:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__cmp" ( "GP_Pretty_Ada:2384" "GP_Sloc:prime.adb:10:32" (Prime__isprime__i.i.int__content >= 2) ) ))
        }
       ( () (* Assume implicit invariants from the loop prime.adb:8 *)
       ;
        assume {  (Boolean.andb(( ( true /\ (Standard__integer___axiom.dynamic_invariant Prime__isprime__i.i.int__content False True True True) ) /\ true )) ((Prime__isprime__i.i.int__content < Prime__isprime__n.n))) };
       () (* Check for absence of RTE in the invariant of loop prime.adb:8 *)
       ;
        abstract ensures {true}(let _ = ( (let j =  (any int
       ) in (
        (if ((Boolean.andb((2 <= j)) ((j <= (#"prime.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:prime.adb:9:52" "GP_Id:4" "comment:         pragma Loop_Invariant(for all J in 2 .. I - 1 => N rem J /= 0);
                                                   ^ prime.adb:9:52:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__pragargs__forall__range__sub" (Standard__integer.range_check_((Prime__isprime__i.i.int__content - 1))) )))))) then (
          abstract ensures {true}(let _ = ((#"prime.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:prime.adb:9:61" "GP_Id:5" "comment:         pragma Loop_Invariant(for all J in 2 .. I - 1 => N rem J /= 0);
                                                            ^ prime.adb:9:61:VC_DIVISION_CHECK" "GP_Shape:L_1_while__pragargs__forall__cmp__rem" (Int_Division.rem_(Prime__isprime__n.n) (j)) )) <> 0) in (
          ()))
          end ))))
       ;
        (any bool
       requires { true} 
       ensures { ( (result = True) <-> (forall j   "model" "model_trace:2361" "name:J"  : int.
        ( ( (2 <= j) /\ (j <= (Prime__isprime__i.i.int__content - 1)) ) -> ((Int_Division.rem Prime__isprime__n.n j) <> 0) )) )} 
       ) ) in (
        ()))
        end ;
        abstract ensures {true}(let _ = (Prime__isprime__i.i.int__content >= 2) in (
        ()))
        end ;
       () (* Loop statements appearing after the loop invariant of loop prime.adb:8 *)
       ;
       ( "GP_Sloc:prime.adb:11:19" (#"prime.adb" 11 0 0# ()) );
       ( "GP_Sloc:prime.adb:11:10" (#"prime.adb" 11 0 0# (if (((#"prime.adb" 11 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:prime.adb:11:15" "GP_Id:2" "comment:         if N rem I = 0 then
              ^ prime.adb:11:15:VC_DIVISION_CHECK" "GP_Shape:L_1_while__if__cmp__rem" (Int_Division.rem_(Prime__isprime__n.n) (Prime__isprime__i.i.int__content)) )) = 0)) then (
        ( ( "GP_Sloc:prime.adb:12:14" (#"prime.adb" 12 0 0# ( #"prime.adb" 12 0 0# abstract ensures {true}(let _ = ( (let i = #"prime.adb" 12 0 0# (any int
        ) in (
         (if ((Boolean.andb((2 <= i)) ((i <= (Prime__isprime__n.n - 1))))) then (
          #"prime.adb" 12 0 0# abstract ensures {true}(let _ = ((#"prime.adb" 12 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:prime.adb:12:59" "GP_Reason:VC_DIVISION_CHECK" "GP_Id:0" "comment:             pragma Assert (for some I in 2 .. N - 1 => N rem I = 0);
                                                          ^ prime.adb:12:59:VC_DIVISION_CHECK" "GP_Shape:L_1_while__if__pragargs__forsome__cmp__rem" (Int_Division.rem_(Prime__isprime__n.n) (i)) )) = 0) in (
           ()))
           end ))))
        ;
         (any bool
        requires { true} 
        ensures { ( (result = True) <-> (exists i  : int.
         ( ( (2 <= i) /\ (i <= (Prime__isprime__n.n - 1)) ) /\ ((Int_Division.rem Prime__isprime__n.n i) = 0) )) )} 
        ) ) in (
         ()))
         end ;
         assert {  (#"prime.adb" 12 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:prime.adb:12:29" "GP_Reason:VC_ASSERT" "GP_Id:1" "comment:             pragma Assert (for some I in 2 .. N - 1 => N rem I = 0);
                            ^ prime.adb:12:29:VC_ASSERT" "GP_Shape:L_1_while__if__pragargs__forsome" (exists i  : int.
         ( ( (2 <= i) /\ (i <= (Prime__isprime__n.n - 1)) ) /\ ( "GP_Pretty_Ada:2412" "GP_Sloc:prime.adb:12:57" ((Int_Division.rem Prime__isprime__n.n i) = 0) ) )) )) } )) );
        ( "GP_Sloc:prime.adb:13:13" (#"prime.adb" 13 0 0# ( #"prime.adb" 13 0 0# prime__isprime__result.bool__content <- ( (Boolean.of_int(0)) );
        #"prime.adb" 13 0 0# raise Return__exc )) ) )) else (
        ()))) );
       ( "GP_Sloc:prime.adb:15:10" (#"prime.adb" 15 0 0# ()) );
       ( "GP_Sloc:prime.adb:15:15" (#"prime.adb" 15 0 0# ()) );
       ( "GP_Sloc:prime.adb:15:12" (#"prime.adb" 15 0 0# #"prime.adb" 15 0 0# Prime__isprime__i.i.int__content <- ( (#"prime.adb" 15 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:prime.adb:15:17" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:3" "comment:         I := I + 1;                      
                ^ prime.adb:15:17:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__i_assign__add" (Standard__integer.range_check_((Prime__isprime__i.i.int__content + 1))) )) )) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop prime.adb:8 *)
       ;
       (if (not ( (Prime__isprime__i.i.int__content < Prime__isprime__n.n) )) then (
         raise Prime__isprime__L_1.L_1)) )
      done )))
      )
    with
     Prime__isprime__L_1.L_1 -> ()
    end)) )) );
   ( "GP_Sloc:prime.adb:17:7" (#"prime.adb" 17 0 0# ( #"prime.adb" 17 0 0# abstract ensures {true}(let _ = ( (let j = #"prime.adb" 17 0 0# (any int
   ) in (
    (if ((Boolean.andb((2 <= j)) ((j <= (Prime__isprime__n.n - 1))))) then (
     #"prime.adb" 17 0 0# abstract ensures {true}(let _ = ((#"prime.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:prime.adb:17:50" "GP_Id:8" "comment:      pragma Assert(for all J in 2 .. N - 1 => N rem J /= 0);
                                                 ^ prime.adb:17:50:VC_DIVISION_CHECK" "GP_Shape:pragargs__forall__cmp__rem" (Int_Division.rem_(Prime__isprime__n.n) (j)) )) <> 0) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2425"  : int.
    ( ( (2 <= j) /\ (j <= (Prime__isprime__n.n - 1)) ) -> ((Int_Division.rem Prime__isprime__n.n j) <> 0) )) )} 
   ) ) in (
    ()))
    end ;
    assert {  (#"prime.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_ASSERT" "GP_Sloc:prime.adb:17:21" "GP_Id:9" "comment:      pragma Assert(for all J in 2 .. N - 1 => N rem J /= 0);
                    ^ prime.adb:17:21:VC_ASSERT" "GP_Shape:pragargs__forall" (forall j #"prime.adb" 17 0 0#  "model" "name:J" "model_trace:2425"  : int.
    ( ( (2 <= j) /\ (j <= (Prime__isprime__n.n - 1)) ) -> ( "GP_Pretty_Ada:2442" "GP_Sloc:prime.adb:17:48" ((Int_Division.rem Prime__isprime__n.n j) <> 0) ) )) )) } )) );
   ( "GP_Sloc:prime.adb:18:7" (#"prime.adb" 18 0 0# ( #"prime.adb" 18 0 0# prime__isprime__result.bool__content <- ( (Boolean.of_int(1)) );
   #"prime.adb" 18 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (if (prime__isprime__result.bool__content) then (
   ( (let i =  (any int
   ) in (
    (if ((Boolean.andb((2 <= i)) ((i <= (Prime__isprime__n.n - 1))))) then (
      abstract ensures {true}(let _ = ((#"prime.ads" 7 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:prime.ads:7:49" "GP_Id:10" "comment:                  (for all I in 2 .. N - 1 => N rem I /= 0)
                                                ^ prime.ads:7:49:VC_DIVISION_CHECK" "GP_Shape:pragargs__if__forall__cmp__rem" (Int_Division.rem_(Prime__isprime__n.n) (i)) )) <> 0) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2507"  : int.
    ( ( (2 <= i) /\ (i <= (Prime__isprime__n.n - 1)) ) -> ((Int_Division.rem Prime__isprime__n.n i) <> 0) )) )} 
   ) )) else (
   ( (let i =  (any int
   ) in (
    (if ((Boolean.andb((2 <= i)) ((i <= (Prime__isprime__n.n - 1))))) then (
      abstract ensures {true}(let _ = ((#"prime.ads" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_DIVISION_CHECK" "GP_Sloc:prime.ads:9:50" "GP_Id:11" "comment:                  (for some I in 2 .. N - 1 => N rem I = 0)
                                                 ^ prime.ads:9:50:VC_DIVISION_CHECK" "GP_Shape:pragargs__if__forsome__cmp__rem" (Int_Division.rem_(Prime__isprime__n.n) (i)) )) = 0) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (exists i  : int.
    ( ( (2 <= i) /\ (i <= (Prime__isprime__n.n - 1)) ) /\ ((Int_Division.rem Prime__isprime__n.n i) = 0) )) )} 
   ) ))) in (
   ()))
   end ;
  prime__isprime__result.bool__content )
end
