(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name
 use import "_gnatprove_standard".Main
 use import "int".Int

 type name 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  0
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = name, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type name__ref =
  { mutable name__content "model_trace:" "name:" : name }
 
 function name__ref___projection 
   (a : name__ref) : name =
  a.name__content
 
 meta "model_projection" function name__ref___projection
 
 meta "inline : no" function name__ref___projection
 
 val name__havoc 
   (x : name__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "name" defined at system.ads:46, created in Gnat2Why.Types.Translate_Type *)
module System__name__rep
 use        System__name
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__name.name, 
 predicate in_range = System__name.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant *)
module System__system_name
 use import "_gnatprove_standard".Main

 function system_name #"system.ads" 47 0 0#"model" "model_trace:2833" "name:System_Name" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".BV64

 type address 
 
 function attr__ATTRIBUTE_MODULUS 
   : BV64.t
 
 function first 
   : BV64.t =
  ( 0 : BV64.t )
 
 function last 
   : BV64.t =
  ( 18446744073709551615 : BV64.t )
 
 function first_int 
   : int =
  0
 
 function last_int 
   : int =
  18446744073709551615
 
 predicate in_range 
   (x : BV64.t)  =
  true
 
 predicate in_range_int 
   (x : int)  =
  BV64.uint_in_range x
 
 clone export "ada__model".Static_Modular_64 with
 type t = address, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 predicate in_range_int = in_range_int
 
 type address__ref =
  { mutable address__content "model_trace:" "name:" : address }
 
 function address__ref___projection 
   (a : address__ref) : address =
  a.address__content
 
 meta "model_projection" function address__ref___projection
 
 meta "inline : no" function address__ref___projection
 
 val address__havoc 
   (x : address__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "address" defined at system.ads:108, created in Gnat2Why.Types.Translate_Type *)
module System__address__rep
 use        System__address
 use        "_gnatprove_standard".BV64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_BV64 with
 type t = System__address.address, 
 predicate in_range = System__address.in_range, 
 predicate in_range_int = System__address.in_range_int
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "null_address" defined at system.ads:69, created in Gnat2Why.Decls.Translate_Constant *)
module System__null_address
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function null_address #"system.ads" 69 0 0#"model" "model_trace:2955" "name:Null_Address" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "left" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 77 0 0#"model" "model_trace:3002" "name:Left" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:77, created in Gnat2Why.Decls.Translate_Constant *)
module System__Olt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 77 0 0#"model" "model_trace:3009" "name:Right" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:77, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Olt__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Olt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function olt 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate olt__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 78 0 0#"model" "name:Left" "model_trace:3029" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:78, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ole__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 78 0 0#"model" "name:Right" "model_trace:3036" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:78, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ole__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ole
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ole 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate ole__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 79 0 0#"model" "name:Left" "model_trace:3056" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:79, created in Gnat2Why.Decls.Translate_Constant *)
module System__Ogt__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 79 0 0#"model" "name:Right" "model_trace:3063" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:79, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Ogt__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Ogt
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function ogt 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate ogt__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 80 0 0#"model" "name:Left" "model_trace:3083" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:80, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oge__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 80 0 0#"model" "name:Right" "model_trace:3090" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:80, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oge__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oge
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oge 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate oge__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for defining the constant "left" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__left
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function left #"system.ads" 81 0 0#"model" "name:Left" "model_trace:3110" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "left" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__left___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "right" defined at system.ads:81, created in Gnat2Why.Decls.Translate_Constant *)
module System__Oeq__right
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function right #"system.ads" 81 0 0#"model" "name:Right" "model_trace:3117" 
   : BV64.t
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "right" defined at system.ads:81, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__Oeq__right___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__Oeq
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64

 function oeq 
   (left : BV64.t) (right : BV64.t) : bool
 
 predicate oeq__function_guard 
   (result : bool) (left : BV64.t) (right : BV64.t) 

end

(* Module for axiomatizing type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order
 use import "_gnatprove_standard".Main
 use import "int".Int

 type bit_order 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = bit_order, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type bit_order__ref =
  { mutable bit_order__content "model_trace:" "name:" : bit_order }
 
 function bit_order__ref___projection 
   (a : bit_order__ref) : bit_order =
  a.bit_order__content
 
 meta "model_projection" function bit_order__ref___projection
 
 meta "inline : no" function bit_order__ref___projection
 
 val bit_order__havoc 
   (x : bit_order__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Translate_Type *)
module System__bit_order__rep
 use        System__bit_order
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = System__bit_order.bit_order, 
 predicate in_range = System__bit_order.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_bit_order
 use import "_gnatprove_standard".Main

 function default_bit_order #"system.ads" 92 0 0#"model" "model_trace:3184" "name:Default_Bit_Order" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_priority
 use import "_gnatprove_standard".Main

 function max_priority #"system.ads" 97 0 0#"model" "model_trace:3200" "name:Max_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant *)
module System__max_interrupt_priority
 use import "_gnatprove_standard".Main

 function max_interrupt_priority #"system.ads" 98 0 0#"model" "model_trace:3210" "name:Max_Interrupt_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type any_priority =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = any_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type any_priority__ref =
  { mutable any_priority__content "model_trace:" "name:" : any_priority }
 
 function any_priority__ref___projection 
   (a : any_priority__ref) : any_priority =
  a.any_priority__content
 
 meta "model_projection" function any_priority__ref___projection
 
 meta "inline : no" function any_priority__ref___projection
 
 val any_priority__havoc 
   (x : any_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Translate_Type *)
module System__any_priority__rep
 use        System__any_priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__any_priority.any_priority) : int =
  (System__any_priority.any_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__any_priority.any_priority, 
 predicate in_range = System__any_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type priority =
  < range 0 30 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  30
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type priority__ref =
  { mutable priority__content "model_trace:" "name:" : priority }
 
 function priority__ref___projection 
   (a : priority__ref) : priority =
  a.priority__content
 
 meta "model_projection" function priority__ref___projection
 
 meta "inline : no" function priority__ref___projection
 
 val priority__havoc 
   (x : priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Translate_Type *)
module System__priority__rep
 use        System__priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__priority.priority) : int =
  (System__priority.priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__priority.priority, 
 predicate in_range = System__priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority
 use import "_gnatprove_standard".Main
 use import "int".Int

 type interrupt_priority =
  < range 31 31 >
 
 function first 
   : int =
  31
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = interrupt_priority, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type interrupt_priority__ref =
  { mutable interrupt_priority__content "model_trace:" "name:" : interrupt_priority }
 
 function interrupt_priority__ref___projection 
   (a : interrupt_priority__ref) : interrupt_priority =
  a.interrupt_priority__content
 
 meta "model_projection" function interrupt_priority__ref___projection
 
 meta "inline : no" function interrupt_priority__ref___projection
 
 val interrupt_priority__havoc 
   (x : interrupt_priority__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Translate_Type *)
module System__interrupt_priority__rep
 use        System__interrupt_priority
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__interrupt_priority.interrupt_priority) : int =
  (System__interrupt_priority.interrupt_priority'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__interrupt_priority.interrupt_priority, 
 predicate in_range = System__interrupt_priority.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use import "_gnatprove_standard".Main

 function default_priority #"system.ads" 104 0 0#"model" "model_trace:3262" "name:Default_Priority" 
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_divide_checks
 use import "_gnatprove_standard".Main

 function backend_divide_checks #"system.ads" 121 0 0#"model" "model_trace:3292" "name:Backend_Divide_Checks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant *)
module System__backend_overflow_checks
 use import "_gnatprove_standard".Main

 function backend_overflow_checks #"system.ads" 122 0 0#"model" "model_trace:3302" "name:Backend_Overflow_Checks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant *)
module System__command_line_args
 use import "_gnatprove_standard".Main

 function command_line_args #"system.ads" 123 0 0#"model" "model_trace:3312" "name:Command_Line_Args" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant *)
module System__configurable_run_time
 use import "_gnatprove_standard".Main

 function configurable_run_time #"system.ads" 124 0 0#"model" "model_trace:3322" "name:Configurable_Run_Time" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant *)
module System__denorm
 use import "_gnatprove_standard".Main

 function denorm #"system.ads" 125 0 0#"model" "model_trace:3332" "name:Denorm" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant *)
module System__duration_32_bits
 use import "_gnatprove_standard".Main

 function duration_32_bits #"system.ads" 126 0 0#"model" "model_trace:3342" "name:Duration_32_Bits" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant *)
module System__exit_status_supported
 use import "_gnatprove_standard".Main

 function exit_status_supported #"system.ads" 127 0 0#"model" "model_trace:3352" "name:Exit_Status_Supported" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant *)
module System__fractional_fixed_ops
 use import "_gnatprove_standard".Main

 function fractional_fixed_ops #"system.ads" 128 0 0#"model" "model_trace:3362" "name:Fractional_Fixed_Ops" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_layout
 use import "_gnatprove_standard".Main

 function frontend_layout #"system.ads" 129 0 0#"model" "model_trace:3372" "name:Frontend_Layout" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_overflows
 use import "_gnatprove_standard".Main

 function machine_overflows #"system.ads" 130 0 0#"model" "model_trace:3382" "name:Machine_Overflows" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant *)
module System__machine_rounds
 use import "_gnatprove_standard".Main

 function machine_rounds #"system.ads" 131 0 0#"model" "model_trace:3392" "name:Machine_Rounds" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant *)
module System__preallocated_stacks
 use import "_gnatprove_standard".Main

 function preallocated_stacks #"system.ads" 132 0 0#"model" "model_trace:3402" "name:Preallocated_Stacks" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant *)
module System__signed_zeros
 use import "_gnatprove_standard".Main

 function signed_zeros #"system.ads" 133 0 0#"model" "model_trace:3412" "name:Signed_Zeros" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_default
 use import "_gnatprove_standard".Main

 function stack_check_default #"system.ads" 134 0 0#"model" "model_trace:3422" "name:Stack_Check_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_probes
 use import "_gnatprove_standard".Main

 function stack_check_probes #"system.ads" 135 0 0#"model" "model_trace:3432" "name:Stack_Check_Probes" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant *)
module System__stack_check_limits
 use import "_gnatprove_standard".Main

 function stack_check_limits #"system.ads" 136 0 0#"model" "model_trace:3442" "name:Stack_Check_Limits" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_aggregates
 use import "_gnatprove_standard".Main

 function support_aggregates #"system.ads" 137 0 0#"model" "model_trace:3452" "name:Support_Aggregates" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_atomic_primitives
 use import "_gnatprove_standard".Main

 function support_atomic_primitives #"system.ads" 138 0 0#"model" "model_trace:3462" "name:Support_Atomic_Primitives" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_assign
 use import "_gnatprove_standard".Main

 function support_composite_assign #"system.ads" 139 0 0#"model" "model_trace:3472" "name:Support_Composite_Assign" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_composite_compare
 use import "_gnatprove_standard".Main

 function support_composite_compare #"system.ads" 140 0 0#"model" "model_trace:3482" "name:Support_Composite_Compare" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant *)
module System__support_long_shifts
 use import "_gnatprove_standard".Main

 function support_long_shifts #"system.ads" 141 0 0#"model" "model_trace:3492" "name:Support_Long_Shifts" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant *)
module System__always_compatible_rep
 use import "_gnatprove_standard".Main

 function always_compatible_rep #"system.ads" 142 0 0#"model" "model_trace:3502" "name:Always_Compatible_Rep" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant *)
module System__suppress_standard_library
 use import "_gnatprove_standard".Main

 function suppress_standard_library #"system.ads" 143 0 0#"model" "model_trace:3512" "name:Suppress_Standard_Library" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant *)
module System__use_ada_main_program_name
 use import "_gnatprove_standard".Main

 function use_ada_main_program_name #"system.ads" 144 0 0#"model" "model_trace:3522" "name:Use_Ada_Main_Program_Name" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant *)
module System__frontend_exceptions
 use import "_gnatprove_standard".Main

 function frontend_exceptions #"system.ads" 145 0 0#"model" "model_trace:3532" "name:Frontend_Exceptions" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant *)
module System__zcx_by_default
 use import "_gnatprove_standard".Main

 function zcx_by_default #"system.ads" 146 0 0#"model" "model_trace:3542" "name:ZCX_By_Default" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__integer.integer
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Standard__integer__rep.to_rep (get a temp___idx_154)) = (Standard__integer__rep.to_rep (get b ((b__first - a__first) + temp___idx_154))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__integer__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__integer.component_type, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get

end

(* Module for axiomatizing comparison for the array theory associated to type "Tpriorities_mappingB" defined at system.ads:161, created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__integer_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__integer.component_type, 
 function to_rep = Standard__integer__rep.to_rep, 
 type map = Array__Int__Standard__integer.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__integer.get, 
 function bool_eq = Array__Int__Standard__integer.bool_eq

end

(* Module for axiomatizing type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__Tpriorities_mappingB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        System__any_priority
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = System__any_priority.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tpriorities_mappingB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tpriorities_mappingB__ref =
  { mutable tpriorities_mappingB__content "model_trace:" "name:" : tpriorities_mappingB }
 
 function tpriorities_mappingB__ref___projection 
   (a : tpriorities_mappingB__ref) : tpriorities_mappingB =
  a.tpriorities_mappingB__content
 
 meta "model_projection" function tpriorities_mappingB__ref___projection
 
 meta "inline : no" function tpriorities_mappingB__ref___projection
 
 val tpriorities_mappingB__havoc 
   (x : tpriorities_mappingB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Translate_Type *)
module System__priorities_mapping
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t3s =
  < range 0 31 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t3s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t3s__ref =
  { mutable t3s__content "model_trace:" "name:" : t3s }
 
 function t3s__ref___projection 
   (a : t3s__ref) : t3s =
  a.t3s__content
 
 meta "model_projection" function t3s__ref___projection
 
 meta "inline : no" function t3s__ref___projection
 
 val t3s__havoc 
   (x : t3s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T3s__rep
 use        System__T3s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : System__T3s.t3s) : int =
  (System__T3s.t3s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = System__T3s.t3s, 
 predicate in_range = System__T3s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Translate_Type *)
module System__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function first 
   : int =
  0
 
 function last 
   : int =
  31
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for defining the constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant *)
module System__underlying_priorities
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function underlying_priorities #"system.ads" 165 0 0#"model_projected" "model_trace:3568" "name:Underlying_Priorities" 
   : Array__Int__Standard__integer.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "msg" defined at s-assert.ads:46, created in Gnat2Why.Decls.Translate_Constant *)
module System__assertions__raise_assert_failure__msg
 use import "_gnatprove_standard".Main
 use        Standard__string

 function msg #"s-assert.ads" 46 0 0#"model_projected" "model_trace:3739" "name:Msg" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "msg" defined at s-assert.ads:46, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module System__assertions__raise_assert_failure__msg___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "check" defined at a-assert.ads:60, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__assertions__assert__check
 use import "_gnatprove_standard".Main

 function check__ #"a-assert.ads" 60 0 0#"model" "model_trace:2747" "name:Check" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "check" defined at a-assert.ads:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__assertions__assert__check___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "check" defined at a-assert.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__assertions__assert__2__check
 use import "_gnatprove_standard".Main

 function check__ #"a-assert.ads" 63 0 0#"model" "name:Check" "model_trace:2770" 
   : bool
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "check" defined at a-assert.ads:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__assertions__assert__2__check___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the constant "message" defined at a-assert.ads:63, created in Gnat2Why.Decls.Translate_Constant *)
module Ada__assertions__assert__2__message
 use import "_gnatprove_standard".Main
 use        Standard__string

 function message #"a-assert.ads" 63 0 0#"model_projected" "model_trace:2779" "name:Message" 
   : Standard__string.string
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "message" defined at a-assert.ads:63, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Ada__assertions__assert__2__message___axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "arr" defined at selection.ads:3, created in Gnat2Why.Types.Translate_Type *)
module Selection__arr
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Array__Int__Standard__integer

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type arr =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type arr__ref =
  { mutable arr__content "model_trace:" "name:" : arr }
 
 function arr__ref___projection 
   (a : arr__ref) : arr =
  a.arr__content
 
 meta "model_projection" function arr__ref___projection
 
 meta "inline : no" function arr__ref___projection
 
 val arr__havoc 
   (x : arr__ref) : unit
  writes {x}

end

(* Module for defining the constant "a" defined at selection.ads:5, created in Gnat2Why.Decls.Translate_Constant *)
module Selection__sorted__a
 use import "_gnatprove_standard".Main
 use        Selection__arr

 function a #"selection.ads" 5 0 0#"model_projected" "model_trace:2550" "name:A" 
   : Selection__arr.arr
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at selection.ads:5, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selection__sorted__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "sorted" defined at selection.ads:5, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Selection__sorted
 use import "_gnatprove_standard".Main
 use        Selection__arr

 function sorted 
   (a : Selection__arr.arr) : bool
 
 predicate sorted__function_guard 
   (result : bool) (a : Selection__arr.arr) 

end

(* Module for axiomatizing type "T10s" defined at selection.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Selection__sorted__L9s__T10s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t10s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t10s__ref =
  { mutable t10s__content "model_trace:" "name:" : t10s }
 
 function t10s__ref___projection 
   (a : t10s__ref) : t10s =
  a.t10s__content
 
 meta "model_projection" function t10s__ref___projection
 
 meta "inline : no" function t10s__ref___projection
 
 val t10s__havoc 
   (x : t10s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T4s" defined at selection.ads:6, created in Gnat2Why.Types.Translate_Type *)
module Selection__sorted__L3s__T4s
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t4s =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4s, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t4s__ref =
  { mutable t4s__content "model_trace:" "name:" : t4s }
 
 function t4s__ref___projection 
   (a : t4s__ref) : t4s =
  a.t4s__content
 
 meta "model_projection" function t4s__ref___projection
 
 meta "inline : no" function t4s__ref___projection
 
 val t4s__havoc 
   (x : t4s__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "TS1bP1" defined at selection.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Selection__sort__TS1bP1
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type tS1bP1 =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = tS1bP1, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type tS1bP1__ref =
  { mutable tS1bP1__content "model_trace:" "name:" : tS1bP1 }
 
 function tS1bP1__ref___projection 
   (a : tS1bP1__ref) : tS1bP1 =
  a.tS1bP1__content
 
 meta "model_projection" function tS1bP1__ref___projection
 
 meta "inline : no" function tS1bP1__ref___projection
 
 val tS1bP1__havoc 
   (x : tS1bP1__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "S1b" defined at selection.adb:5, created in Gnat2Why.Types.Translate_Type *)
module Selection__sort__S1b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selection__sort__TS1bP1

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Selection__sort__TS1bP1.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type s1b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type s1b__ref =
  { mutable s1b__content "model_trace:" "name:" : s1b }
 
 function s1b__ref___projection 
   (a : s1b__ref) : s1b =
  a.s1b__content
 
 meta "model_projection" function s1b__ref___projection
 
 meta "inline : no" function s1b__ref___projection
 
 val s1b__havoc 
   (x : s1b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T2b" defined at selection.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Selection__sort__L_1__T2b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t2b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t2b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t2b__ref =
  { mutable t2b__content "model_trace:" "name:" : t2b }
 
 function t2b__ref___projection 
   (a : t2b__ref) : t2b =
  a.t2b__content
 
 meta "model_projection" function t2b__ref___projection
 
 meta "inline : no" function t2b__ref___projection
 
 val t2b__havoc 
   (x : t2b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T3b" defined at selection.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Selection__sort__L_2__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t3b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t3b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3b__ref =
  { mutable t3b__content "model_trace:" "name:" : t3b }
 
 function t3b__ref___projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T7b" defined at selection.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Selection__sort__L_2__L6b__T7b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t7b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t7b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t7b__ref =
  { mutable t7b__content "model_trace:" "name:" : t7b }
 
 function t7b__ref___projection 
   (a : t7b__ref) : t7b =
  a.t7b__content
 
 meta "model_projection" function t7b__ref___projection
 
 meta "inline : no" function t7b__ref___projection
 
 val t7b__havoc 
   (x : t7b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T5b" defined at selection.adb:17, created in Gnat2Why.Types.Translate_Type *)
module Selection__sort__L_2__L4b__T5b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t5b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t5b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t5b__ref =
  { mutable t5b__content "model_trace:" "name:" : t5b }
 
 function t5b__ref___projection 
   (a : t5b__ref) : t5b =
  a.t5b__content
 
 meta "model_projection" function t5b__ref___projection
 
 meta "inline : no" function t5b__ref___projection
 
 val t5b__havoc 
   (x : t5b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T11b" defined at selection.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Selection__sort__L_1__L10b__T11b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t11b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t11b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t11b__ref =
  { mutable t11b__content "model_trace:" "name:" : t11b }
 
 function t11b__ref___projection 
   (a : t11b__ref) : t11b =
  a.t11b__content
 
 meta "model_projection" function t11b__ref___projection
 
 meta "inline : no" function t11b__ref___projection
 
 val t11b__havoc 
   (x : t11b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T9b" defined at selection.adb:22, created in Gnat2Why.Types.Translate_Type *)
module Selection__sort__L_1__L8b__T9b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t9b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t9b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t9b__ref =
  { mutable t9b__content "model_trace:" "name:" : t9b }
 
 function t9b__ref___projection 
   (a : t9b__ref) : t9b =
  a.t9b__content
 
 meta "model_projection" function t9b__ref___projection
 
 meta "inline : no" function t9b__ref___projection
 
 val t9b__havoc 
   (x : t9b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14b" defined at selection.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Selection__sort__L_1__T14b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep

 type t14b =
  Standard__integer.integer
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t14b, 
 type rep_type = int, 
 function base_to_rep = Standard__integer__rep.to_rep, 
 function base_of_rep = Standard__integer__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t14b__ref =
  { mutable t14b__content "model_trace:" "name:" : t14b }
 
 function t14b__ref___projection 
   (a : t14b__ref) : t14b =
  a.t14b__content
 
 meta "model_projection" function t14b__ref___projection
 
 meta "inline : no" function t14b__ref___projection
 
 val t14b__havoc 
   (x : t14b__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T15b" defined at selection.adb:26, created in Gnat2Why.Types.Translate_Type *)
module Selection__sort__L_1__T15b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selection__sort__L_1__T14b

 type component_type =
  Standard__integer.integer
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__integer.map, 
 function array_bool_eq = Array__Int__Standard__integer.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Selection__sort__L_1__T14b.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type t15b =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type t15b__ref =
  { mutable t15b__content "model_trace:" "name:" : t15b }
 
 function t15b__ref___projection 
   (a : t15b__ref) : t15b =
  a.t15b__content
 
 meta "model_projection" function t15b__ref___projection
 
 meta "inline : no" function t15b__ref___projection
 
 val t15b__havoc 
   (x : t15b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "a" defined at selection.ads:11, created in Gnat2Why.Decls.Translate_Variable *)
module Selection__sort__a
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Array__Int__Standard__integer

 val a #"selection.ads" 11 0 0#"model_projected" "name:A" "model_trace:2608"  : Array__Int__Standard__integer.map__ref 
 
 function a__first #"selection.ads" 11 0 0#"model_projected" "name:A" "model_trace:2608'First" 
   : Standard__integer.integer
 
 function a__last #"selection.ads" 11 0 0#"model_projected" "name:A" "model_trace:2608'Last" 
   : Standard__integer.integer
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at selection.ads:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selection__sort__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "min" defined at selection.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Selection__sort__min
 use import "_gnatprove_standard".Main

 val min #"selection.adb" 6 0 0#"model_projected" "model_trace:2333" "name:min"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "min" defined at selection.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selection__sort__min___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "c" defined at selection.adb:7, created in Gnat2Why.Decls.Translate_Variable *)
module Selection__sort__c
 use import "_gnatprove_standard".Main

 val c #"selection.adb" 7 0 0#"model_projected" "model_trace:2342" "name:c"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "c" defined at selection.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selection__sort__c___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at selection.adb:9, created in Gnat2Why.Decls.Translate_Variable *)
module Selection__sort__L_1__i
 use import "_gnatprove_standard".Main

 val i #"selection.adb" 9 0 0#"model_projected" "model_trace:2354" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at selection.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selection__sort__L_1__i___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "j" defined at selection.adb:11, created in Gnat2Why.Decls.Translate_Variable *)
module Selection__sort__L_2__j
 use import "_gnatprove_standard".Main

 val j #"selection.adb" 11 0 0#"model_projected" "model_trace:2378" "name:J"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "j" defined at selection.adb:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selection__sort__L_2__j___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for declaring an abstract function for the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer

 function system__underlying_priorities__aggregate_def 
   (temp___156 : int) (temp___157 : int) (temp___158 : int) (temp___159 : int) (temp___160 : int) (temp___161 : int) (temp___162 : int) (temp___163 : int) (temp___164 : int) (temp___165 : int) (temp___166 : int) (temp___167 : int) (temp___168 : int) (temp___169 : int) (temp___170 : int) (temp___171 : int) : Array__Int__Standard__integer.map

end

(* Module for possibly declaring a logic function for "raise_assert_failure" defined at s-assert.ads:46, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module System__assertions__raise_assert_failure
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "assert" defined at a-assert.ads:60, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__assertions__assert
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "assert__2" defined at a-assert.ads:63, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada__assertions__assert__2
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "sort" defined at selection.ads:11, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Selection__sort
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at selection.adb:9, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Selection__sort__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at selection.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selection__sort__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at selection.adb:11, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Selection__sort__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at selection.adb:11, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Selection__sort__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "name" defined at system.ads:46, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__name

 predicate dynamic_invariant "inline" 
   (temp___expr_177 : int) (temp___is_init_173 : bool) (temp___skip_constant_174 : bool) (temp___do_toplevel_175 : bool) (temp___do_typ_inv_176 : bool)  =
  (if (( temp___is_init_173 \/ (System__name.first <= System__name.last) )) then (
   (System__name.dynamic_property System__name.first System__name.last temp___expr_177)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_178 : int) (temp___skip_top_level_179 : bool)  =
  true

end

(* Module giving axioms for type "address" defined at system.ads:108, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__address

 predicate dynamic_invariant "inline" 
   (temp___expr_184 : BV64.t) (temp___is_init_180 : bool) (temp___skip_constant_181 : bool) (temp___do_toplevel_182 : bool) (temp___do_typ_inv_183 : bool)  =
  (if (( temp___is_init_180 \/ (BV64.ule System__address.first System__address.last) )) then (
   (System__address.dynamic_property System__address.first System__address.last temp___expr_184)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_185 : BV64.t) (temp___skip_top_level_186 : bool)  =
  true

end

(* Module giving axioms for type "bit_order" defined at system.ads:91, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__bit_order___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__bit_order

 predicate dynamic_invariant "inline" 
   (temp___expr_191 : int) (temp___is_init_187 : bool) (temp___skip_constant_188 : bool) (temp___do_toplevel_189 : bool) (temp___do_typ_inv_190 : bool)  =
  (if (( temp___is_init_187 \/ (System__bit_order.first <= System__bit_order.last) )) then (
   (System__bit_order.dynamic_property System__bit_order.first System__bit_order.last temp___expr_191)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_192 : int) (temp___skip_top_level_193 : bool)  =
  true

end

(* Module giving axioms for type "any_priority" defined at system.ads:100, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__any_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__any_priority

 predicate dynamic_invariant "inline" 
   (temp___expr_198 : int) (temp___is_init_194 : bool) (temp___skip_constant_195 : bool) (temp___do_toplevel_196 : bool) (temp___do_typ_inv_197 : bool)  =
  (if (( temp___is_init_194 \/ (System__any_priority.first <= System__any_priority.last) )) then (
   (System__any_priority.dynamic_property System__any_priority.first System__any_priority.last temp___expr_198)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_199 : int) (temp___skip_top_level_200 : bool)  =
  true

end

(* Module giving axioms for type "priority" defined at system.ads:101, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__priority

 predicate dynamic_invariant "inline" 
   (temp___expr_205 : int) (temp___is_init_201 : bool) (temp___skip_constant_202 : bool) (temp___do_toplevel_203 : bool) (temp___do_typ_inv_204 : bool)  =
  (if (( temp___is_init_201 \/ (System__priority.first <= System__priority.last) )) then (
   (System__priority.dynamic_property System__priority.first System__priority.last temp___expr_205)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_206 : int) (temp___skip_top_level_207 : bool)  =
  true

end

(* Module giving axioms for type "interrupt_priority" defined at system.ads:102, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__interrupt_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__interrupt_priority

 predicate dynamic_invariant "inline" 
   (temp___expr_212 : int) (temp___is_init_208 : bool) (temp___skip_constant_209 : bool) (temp___do_toplevel_210 : bool) (temp___do_typ_inv_211 : bool)  =
  (if (( temp___is_init_208 \/ (System__interrupt_priority.first <= System__interrupt_priority.last) )) then (
   (System__interrupt_priority.dynamic_property System__interrupt_priority.first System__interrupt_priority.last temp___expr_212)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_213 : int) (temp___skip_top_level_214 : bool)  =
  true

end

(* Module giving axioms for type "Tpriorities_mappingB" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__Tpriorities_mappingB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "priorities_mapping" defined at system.ads:161, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__priorities_mapping___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_219 : Array__Int__Standard__integer.map) (temp___is_init_215 : bool) (temp___skip_constant_216 : bool) (temp___do_toplevel_217 : bool) (temp___do_typ_inv_218 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_221 : Array__Int__Standard__integer.map) (temp___skip_top_level_222 : bool)  =
  true

end

(* Module giving axioms for type "T3s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T3s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at system.ads:166, created in Gnat2Why.Types.Generate_Type_Completion *)
module System__T4s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "arr" defined at selection.ads:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__arr___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Selection__arr

 predicate dynamic_invariant "inline" 
   (temp___expr_231 : Selection__arr.arr) (temp___is_init_227 : bool) (temp___skip_constant_228 : bool) (temp___do_toplevel_229 : bool) (temp___do_typ_inv_230 : bool)  =
  (if (temp___skip_constant_228) then (
   true) else (
   (Selection__arr.dynamic_property Standard__positive.first Standard__positive.last (Selection__arr.first temp___expr_231) (Selection__arr.last temp___expr_231))))

end

(* Module giving axioms for type "T10s" defined at selection.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sorted__L9s__T10s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T4s" defined at selection.ads:6, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sorted__L3s__T4s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "TS1bP1" defined at selection.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sort__TS1bP1___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "S1b" defined at selection.adb:5, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sort__S1b___axiom
 use import "_gnatprove_standard".Main
 use        Standard__integer__rep
 use        Selection__sort__a
 use        Selection__sort__S1b

 predicate dynamic_invariant "inline" 
   (temp___expr_243 : Selection__sort__S1b.s1b) (temp___is_init_239 : bool) (temp___skip_constant_240 : bool) (temp___do_toplevel_241 : bool) (temp___do_typ_inv_242 : bool)  =
  (if (temp___skip_constant_240) then (
   true) else (
   ( (Selection__sort__S1b.dynamic_property (Standard__integer__rep.to_rep Selection__sort__a.a__first) (Standard__integer__rep.to_rep Selection__sort__a.a__last) (Selection__sort__S1b.first temp___expr_243) (Selection__sort__S1b.last temp___expr_243)) /\ ( ((Selection__sort__S1b.first temp___expr_243) = (Standard__integer__rep.to_rep Selection__sort__a.a__first)) /\ ((Selection__sort__S1b.last temp___expr_243) = (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )))
 
 predicate default_initial_assumption "inline" 
   (temp___expr_245 : Selection__sort__S1b.s1b) (temp___skip_top_level_246 : bool)  =
  true

end

(* Module giving axioms for type "T2b" defined at selection.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sort__L_1__T2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at selection.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sort__L_2__T3b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T7b" defined at selection.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sort__L_2__L6b__T7b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T5b" defined at selection.adb:17, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sort__L_2__L4b__T5b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T11b" defined at selection.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sort__L_1__L10b__T11b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T9b" defined at selection.adb:22, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sort__L_1__L8b__T9b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T14b" defined at selection.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sort__L_1__T14b___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T15b" defined at selection.adb:26, created in Gnat2Why.Types.Generate_Type_Completion *)
module Selection__sort__L_1__T15b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining the value of constant "system_name" defined at system.ads:47, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__system_name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__system_name

 axiom system_name__def_axiom :
  ((System__system_name.system_name ) = 0)

end

(* Module for defining the value of constant "default_bit_order" defined at system.ads:92, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_bit_order___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_bit_order

 axiom default_bit_order__def_axiom :
  ((System__default_bit_order.default_bit_order ) = 1)

end

(* Module for defining the value of constant "max_priority" defined at system.ads:97, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_priority

 axiom max_priority__def_axiom :
  ((System__max_priority.max_priority ) = 30)

end

(* Module for defining the value of constant "max_interrupt_priority" defined at system.ads:98, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__max_interrupt_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__max_interrupt_priority

 axiom max_interrupt_priority__def_axiom :
  ((System__max_interrupt_priority.max_interrupt_priority ) = 31)

end

(* Module for defining the value of constant "default_priority" defined at system.ads:104, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = 15)

end

(* Module for defining the value of constant "null_address" defined at system.ads:109, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__null_address___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__null_address

 axiom null_address__def_axiom :
  ((System__null_address.null_address ) = ( 0 : BV64.t ))

end

(* Module for defining the value of constant "backend_divide_checks" defined at system.ads:121, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_divide_checks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_divide_checks

 axiom backend_divide_checks__def_axiom :
  ((System__backend_divide_checks.backend_divide_checks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "backend_overflow_checks" defined at system.ads:122, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__backend_overflow_checks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__backend_overflow_checks

 axiom backend_overflow_checks__def_axiom :
  ((System__backend_overflow_checks.backend_overflow_checks ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "command_line_args" defined at system.ads:123, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__command_line_args___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__command_line_args

 axiom command_line_args__def_axiom :
  ((System__command_line_args.command_line_args ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "configurable_run_time" defined at system.ads:124, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__configurable_run_time___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__configurable_run_time

 axiom configurable_run_time__def_axiom :
  ((System__configurable_run_time.configurable_run_time ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "denorm" defined at system.ads:125, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__denorm___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__denorm

 axiom denorm__def_axiom :
  ((System__denorm.denorm ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "duration_32_bits" defined at system.ads:126, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__duration_32_bits___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__duration_32_bits

 axiom duration_32_bits__def_axiom :
  ((System__duration_32_bits.duration_32_bits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "exit_status_supported" defined at system.ads:127, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__exit_status_supported___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__exit_status_supported

 axiom exit_status_supported__def_axiom :
  ((System__exit_status_supported.exit_status_supported ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "fractional_fixed_ops" defined at system.ads:128, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__fractional_fixed_ops___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__fractional_fixed_ops

 axiom fractional_fixed_ops__def_axiom :
  ((System__fractional_fixed_ops.fractional_fixed_ops ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_layout" defined at system.ads:129, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_layout___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_layout

 axiom frontend_layout__def_axiom :
  ((System__frontend_layout.frontend_layout ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_overflows" defined at system.ads:130, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_overflows___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_overflows

 axiom machine_overflows__def_axiom :
  ((System__machine_overflows.machine_overflows ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "machine_rounds" defined at system.ads:131, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__machine_rounds___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__machine_rounds

 axiom machine_rounds__def_axiom :
  ((System__machine_rounds.machine_rounds ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "preallocated_stacks" defined at system.ads:132, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__preallocated_stacks___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__preallocated_stacks

 axiom preallocated_stacks__def_axiom :
  ((System__preallocated_stacks.preallocated_stacks ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "signed_zeros" defined at system.ads:133, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__signed_zeros___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__signed_zeros

 axiom signed_zeros__def_axiom :
  ((System__signed_zeros.signed_zeros ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_default" defined at system.ads:134, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_default

 axiom stack_check_default__def_axiom :
  ((System__stack_check_default.stack_check_default ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "stack_check_probes" defined at system.ads:135, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_probes___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_probes

 axiom stack_check_probes__def_axiom :
  ((System__stack_check_probes.stack_check_probes ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "stack_check_limits" defined at system.ads:136, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__stack_check_limits___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__stack_check_limits

 axiom stack_check_limits__def_axiom :
  ((System__stack_check_limits.stack_check_limits ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "support_aggregates" defined at system.ads:137, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_aggregates___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_aggregates

 axiom support_aggregates__def_axiom :
  ((System__support_aggregates.support_aggregates ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_atomic_primitives" defined at system.ads:138, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_atomic_primitives___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_atomic_primitives

 axiom support_atomic_primitives__def_axiom :
  ((System__support_atomic_primitives.support_atomic_primitives ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_assign" defined at system.ads:139, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_assign___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_assign

 axiom support_composite_assign__def_axiom :
  ((System__support_composite_assign.support_composite_assign ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_composite_compare" defined at system.ads:140, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_composite_compare___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_composite_compare

 axiom support_composite_compare__def_axiom :
  ((System__support_composite_compare.support_composite_compare ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "support_long_shifts" defined at system.ads:141, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__support_long_shifts___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__support_long_shifts

 axiom support_long_shifts__def_axiom :
  ((System__support_long_shifts.support_long_shifts ) = (Boolean.of_int 1))

end

(* Module for defining the value of constant "always_compatible_rep" defined at system.ads:142, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__always_compatible_rep___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__always_compatible_rep

 axiom always_compatible_rep__def_axiom :
  ((System__always_compatible_rep.always_compatible_rep ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "suppress_standard_library" defined at system.ads:143, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__suppress_standard_library___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__suppress_standard_library

 axiom suppress_standard_library__def_axiom :
  ((System__suppress_standard_library.suppress_standard_library ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "use_ada_main_program_name" defined at system.ads:144, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__use_ada_main_program_name___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__use_ada_main_program_name

 axiom use_ada_main_program_name__def_axiom :
  ((System__use_ada_main_program_name.use_ada_main_program_name ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "frontend_exceptions" defined at system.ads:145, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__frontend_exceptions___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__frontend_exceptions

 axiom frontend_exceptions__def_axiom :
  ((System__frontend_exceptions.frontend_exceptions ) = (Boolean.of_int 0))

end

(* Module for defining the value of constant "zcx_by_default" defined at system.ads:146, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__zcx_by_default___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        System__zcx_by_default

 axiom zcx_by_default__def_axiom :
  ((System__zcx_by_default.zcx_by_default ) = (Boolean.of_int 1))

end

(* Module for defining the value of the aggregate at system.ads:166, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module System__underlying_priorities__aggregate_def___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer___axiom
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom def_axiom :
  (forall temp___156   temp___157   temp___158   temp___159   temp___160   temp___161   temp___162   temp___163   temp___164   temp___165   temp___166   temp___167   temp___168   temp___169   temp___170   temp___171   : int.
   (let temp___155 = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def temp___156 temp___157 temp___158 temp___159 temp___160 temp___161 temp___162 temp___163 temp___164 temp___165 temp___166 temp___167 temp___168 temp___169 temp___170 temp___171) in (
    (if (( ( ( ( ( ( ( ( ( ( ( ( ( ( ( (Standard__integer___axiom.dynamic_invariant temp___156 True True True True) /\ (Standard__integer___axiom.dynamic_invariant temp___157 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___158 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___159 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___160 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___161 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___162 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___163 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___164 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___165 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___166 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___167 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___168 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___169 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___170 True True True True) ) /\ (Standard__integer___axiom.dynamic_invariant temp___171 True True True True) )) then (
     (forall temp___172   : int.
      (if (( (31 <= temp___172) /\ (temp___172 <= 31) )) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 15 : Standard__integer.integer ))) else if (( (21 <= temp___172) /\ (temp___172 <= 30) )) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 6 : Standard__integer.integer )))  else if ((temp___172 = 20)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 5 : Standard__integer.integer )))  else if ((temp___172 = 19)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 4 : Standard__integer.integer )))  else if ((temp___172 = 18)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 3 : Standard__integer.integer )))  else if ((temp___172 = 17)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 2 : Standard__integer.integer )))  else if ((temp___172 = 16)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 1 : Standard__integer.integer )))  else if ((temp___172 = 15)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( 0 : Standard__integer.integer )))  else if ((temp___172 = 14)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -1 : Standard__integer.integer )))  else if ((temp___172 = 13)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -2 : Standard__integer.integer )))  else if ((temp___172 = 12)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -3 : Standard__integer.integer )))  else if ((temp___172 = 11)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -4 : Standard__integer.integer )))  else if ((temp___172 = 10)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -5 : Standard__integer.integer )))  else if ((temp___172 = 9)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -6 : Standard__integer.integer )))  else if ((temp___172 = 8)) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -7 : Standard__integer.integer )))  else if (( (0 <= temp___172) /\ (temp___172 <= 7) )) then (
       ((Array__Int__Standard__integer.get temp___155 temp___172) = ( -15 : Standard__integer.integer ))) else (
       true)))) else true)))
  )

end

(* Module for defining the value of constant "underlying_priorities" defined at system.ads:165, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__underlying_priorities___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        System__underlying_priorities
 use        Array__Int__Standard__integer
 use        System__underlying_priorities__aggregate_def
 use        Array__Int__Standard__integer

 axiom underlying_priorities__def_axiom :
  ((System__underlying_priorities.underlying_priorities ) = (System__underlying_priorities__aggregate_def.system__underlying_priorities__aggregate_def ( -15 ) ( -7 ) ( -6 ) ( -5 ) ( -4 ) ( -3 ) ( -2 ) ( -1 ) 0 1 2 3 4 5 6 15))

end

(* Module for declaring a program function (and possibly an axiom) for "Olt" defined at system.ads:77, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Olt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Olt
 use        System__address___axiom

 val olt 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Olt.olt left right)) /\ true ) /\ true ) }
 
 axiom olt__post_axiom :
  (forall left   right   : BV64.t [(System__Olt.olt left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Olt.olt left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ole" defined at system.ads:78, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ole___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Ole
 use        System__address___axiom

 val ole 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Ole.ole left right)) /\ true ) /\ true ) }
 
 axiom ole__post_axiom :
  (forall left   right   : BV64.t [(System__Ole.ole left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Ole.ole left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Ogt" defined at system.ads:79, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Ogt___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Ogt
 use        System__address___axiom

 val ogt 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Ogt.ogt left right)) /\ true ) /\ true ) }
 
 axiom ogt__post_axiom :
  (forall left   right   : BV64.t [(System__Ogt.ogt left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Ogt.ogt left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oge" defined at system.ads:80, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oge___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Oge
 use        System__address___axiom

 val oge 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Oge.oge left right)) /\ true ) /\ true ) }
 
 axiom oge__post_axiom :
  (forall left   right   : BV64.t [(System__Oge.oge left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Oge.oge left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "Oeq" defined at system.ads:81, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__Oeq___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".BV64
 use        System__Oeq
 use        System__address___axiom

 val oeq 
   (left : BV64.t) (right : BV64.t) : bool
  requires {  true }
  ensures {  ( ( (result = (System__Oeq.oeq left right)) /\ true ) /\ true ) }
 
 axiom oeq__post_axiom :
  (forall left   right   : BV64.t [(System__Oeq.oeq left right)].
   ( ( (System__address___axiom.dynamic_invariant left True True True True) /\ (System__address___axiom.dynamic_invariant right True True True True) ) -> (let result = (System__Oeq.oeq left right) in (
    ( ( true /\ true ) /\ true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "raise_assert_failure" defined at s-assert.ads:46, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module System__assertions__raise_assert_failure___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val raise_assert_failure 
   (msg : Standard__string.string) : unit
  requires {  true }
  ensures {  false }
 
 namespace No_Return
  val raise_assert_failure 
    (msg : Standard__string.string) : unit
   requires {  false }
   ensures {  false }

 end

end

(* Module for declaring a program function (and possibly an axiom) for "assert" defined at a-assert.ads:60, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__assertions__assert___axiom
 use import "_gnatprove_standard".Main

 val assert__ 
   (check__ : bool) : unit
  requires {  (check__ = True) }
  ensures {  true }

end

(* Module for declaring a program function (and possibly an axiom) for "assert__2" defined at a-assert.ads:63, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada__assertions__assert__2___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string

 val assert__2 
   (check__ : bool) (message : Standard__string.string) : unit
  requires {  (check__ = True) }
  ensures {  true }

end

(* Module giving a program function and a defining axiom for the expression function "sorted" defined at selection.ads:5, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Selection__sorted___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__integer__rep
 use        Selection__sorted
 use        Array__Int__Standard__integer
 use        Selection__arr
 use        Selection__arr___axiom
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer

 val sorted 
   (a : Selection__arr.arr) : bool
  requires {  ((Selection__arr.last a) > ( -2147483648 )) }
  ensures {  ( ( (result = (Selection__sorted.sorted a)) /\ (Selection__sorted.sorted__function_guard result a) ) /\ ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2563"  : int.
   ( ( ((Selection__arr.first a) <= i) /\ (i <= ((Selection__arr.last a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selection__arr.to_array a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selection__arr.to_array a) (i + 1)))) )) ) ) }
 
 axiom sorted__post_axiom :
  (forall a   : Selection__arr.arr [(Selection__sorted.sorted a)].
   ( ( (Selection__arr___axiom.dynamic_invariant a True True True True) /\ ((Selection__arr.last a) > ( -2147483648 )) ) -> (let result = (Selection__sorted.sorted a) in (
    (if ((Selection__sorted.sorted__function_guard result a)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom sorted__def_axiom :
  (forall a   : Selection__arr.arr [(Selection__sorted.sorted a)].
   ( (let result = (Selection__sorted.sorted a) in (
    (Selection__sorted.sorted__function_guard result a)))
    -> ( ((Selection__sorted.sorted a) = True) <-> (forall i   "model" "name:I" "model_trace:2563"  : int.
    ( ( ((Selection__arr.first a) <= i) /\ (i <= ((Selection__arr.last a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selection__arr.to_array a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selection__arr.to_array a) (i + 1)))) )) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "sort" defined at selection.ads:11, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Selection__sort___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__integer__rep
 use        Selection__sorted
 use        Selection__arr
 use        Array__Int__Standard__integer

 val sort 
   (a : Array__Int__Standard__integer.map__ref) (a__first : Standard__integer.integer) (a__last : Standard__integer.integer) : unit
  requires {  ( ( (( -2147483647 ) <= (Standard__integer__rep.to_rep a__first)) /\ ((Standard__integer__rep.to_rep a__first) <= 2147483646) ) /\ ( (( -2147483647 ) <= (Standard__integer__rep.to_rep a__last)) /\ ((Standard__integer__rep.to_rep a__last) <= 2147483646) ) ) }
  ensures {  ( ((epsilon temp___result_235 : bool.
   ( (temp___result_235 = (Selection__sorted.sorted (Selection__arr.of_array a.Array__Int__Standard__integer.map__content (Standard__integer__rep.to_rep a__first) (Standard__integer__rep.to_rep a__last)))) /\ (Selection__sorted.sorted__function_guard temp___result_235 (Selection__arr.of_array a.Array__Int__Standard__integer.map__content (Standard__integer__rep.to_rep a__first) (Standard__integer__rep.to_rep a__last))) )) = True) /\ (if (True) then (
   true) else (
   (Selection__arr.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep a__first) (Standard__integer__rep.to_rep a__last)))) ) }
  writes {a}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "selection" defined at selection.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Selection__package_def
 use import "_gnatprove_standard".Main

 let def #"selection.ads" 1 0 0#"GP_Subp:selection.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"selection.ads" 1 0 0# true }
  ensures { #"selection.ads" 1 0 0# true }
   =
  ( (#"selection.ads" 1 0 0# ());
  (#"selection.ads" 3 0 0# ());
  (#"selection.ads" 5 0 0# ());
  (#"selection.ads" 9 0 0# ());
  (#"selection.ads" 8 0 0# ());
  (#"selection.ads" 11 0 0# ());
  (#"selection.ads" 15 0 0# ());
  (#"selection.ads" 13 0 0# ());
  (#"selection.ads" 13 0 0# ());
  (#"selection.ads" 13 0 0# ());
  (#"selection.ads" 13 0 0# ());
  (#"selection.ads" 5 0 0# ());
  (#"selection.adb" 2 0 0# ());
  (#"selection.adb" 5 0 0# ());
  ( "GP_Sloc:selection.adb:33:1" (#"selection.adb" 33 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "sorted" defined at selection.ads:5, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Selection__sorted__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer__rep
 use        Array__Int__Standard__integer
 use        Selection__arr
 use        Selection__arr___axiom
 use        Selection__sorted__a
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Selection__arr___axiom
 use        Selection__sorted__a___axiom

 val selection__sorted__result "model_projected" "model_trace:2543@result" "name:Sorted"  : bool__ref 
 
 let def #"selection.ads" 5 0 0#"W:diverges:N" "GP_Subp:selection.ads:5" 
   (__void_param : unit)
  requires { #"selection.ads" 5 0 0# true }
  ensures { #"selection.ads" 5 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram selection.ads:5 *)
  ;
  #"selection.ads" 5 0 0# assume { #"selection.ads" 5 0 0# (Selection__arr___axiom.dynamic_invariant Selection__sorted__a.a True False True True) };
  #"selection.ads" 5 0 0# assume { #"selection.ads" 5 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram selection.ads:5 *)
  ;
  () (* Check for RTE in the Pre of the subprogram selection.ads:5 *)
  ;
  #"selection.ads" 5 0 0# abstract ensures {true}(let _ = (( #"selection.ads" 5 0 0# abstract ensures {true}(let _ = Selection__sorted__a.a in (
   ()))
   end ;
  (Selection__arr.last(Selection__sorted__a.a)) ) > ( -2147483648 )) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram selection.ads:5 *)
  ;
  #"selection.ads" 5 0 0# assume { #"selection.ads" 5 0 0# ((Selection__arr.last Selection__sorted__a.a) > ( -2147483648 )) };
  #"selection.ads" 5 0 0# try
   ( ( "GP_Sloc:selection.ads:6:8" (#"selection.ads" 6 0 0# ( #"selection.ads" 6 0 0# selection__sorted__result.bool__content <- ( ( (let i = #"selection.ads" 6 0 0# (any int
   ) in (
    (if ((Boolean.andb((( #"selection.ads" 6 0 0# abstract ensures {true}(let _ = Selection__sorted__a.a in (
     ()))
     end ;
    (Selection__arr.first(Selection__sorted__a.a)) ) <= i)) ((i <= (#"selection.ads" 6 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:selection.ads:6:39" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:0" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1))
                                      ^ selection.ads:6:39:VC_OVERFLOW_CHECK" "GP_Shape:return__forall__range__sub" (Standard__integer.range_check_((( #"selection.ads" 6 0 0# abstract ensures {true}(let _ = Selection__sorted__a.a in (
     ()))
     end ;
    (Selection__arr.last(Selection__sorted__a.a)) ) - 1))) )))))) then (
      abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Selection__arr.to_array(Selection__sorted__a.a))) ((  assert {  (#"selection.ads" 6 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:selection.ads:6:48" "GP_Reason:VC_INDEX_CHECK" "GP_Id:1" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1))
                                               ^ selection.ads:6:48:VC_INDEX_CHECK" "GP_Shape:return__forall__cmp__ixdcomp" ( ((Selection__arr.first Selection__sorted__a.a) <= i) /\ (i <= (Selection__arr.last Selection__sorted__a.a)) ) )) };
     i ))))) <= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get((Selection__arr.to_array(Selection__sorted__a.a))) ((let temp___249 = (#"selection.ads" 6 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:selection.ads:6:58" "GP_Id:2" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1))
                                                         ^ selection.ads:6:58:VC_OVERFLOW_CHECK" "GP_Shape:return__forall__cmp__ixdcomp__add" (Standard__integer.range_check_((i + 1))) )) in (
      (  assert {  (#"selection.ads" 6 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.ads:6:58" "GP_Shape:return__forall__cmp__ixdcomp__add" "GP_Id:3" "comment:   is (for all I in A'First .. A'Last - 1 => A(I) <= A(I + 1))
                                                         ^ selection.ads:6:58:VC_INDEX_CHECK" ( ((Selection__arr.first Selection__sorted__a.a) <= temp___249) /\ (temp___249 <= (Selection__arr.last Selection__sorted__a.a)) ) )) };
      temp___249 )))
     ))))) in (
      ()))
      end ))))
   ;
    (any bool
   requires { true} 
   ensures { ( (result = True) <-> (forall i   "model" "name:I" "model_trace:2563"  : int.
    ( ( ((Selection__arr.first Selection__sorted__a.a) <= i) /\ (i <= ((Selection__arr.last Selection__sorted__a.a) - 1)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selection__arr.to_array Selection__sorted__a.a) i)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get (Selection__arr.to_array Selection__sorted__a.a) (i + 1)))) )) )} 
   ) ) );
    raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  selection__sorted__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "sort" defined at selection.ads:11, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Selection__sort__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Standard__integer
 use        Standard__integer
 use        Standard__integer___axiom
 use        Standard__integer__rep
 use        Standard__positive
 use        Standard__integer__rep
 use        Selection__sorted
 use        Selection__sorted___axiom
 use        Array__Int__Standard__integer
 use        Selection__arr
 use        Array__Int__Standard__integer
 use        Selection__sort__a
 use        Selection__sort__min
 use        Selection__sort__c
 use        Selection__sort__L_1
 use        Selection__sort__L_1__T2b
 use        Selection__sort__L_1__i
 use        Selection__sort__L_2
 use        Selection__sort__L_2__T3b
 use        Selection__sort__L_2__j
 use        Selection__sort__L_1__T15b
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Array__Int__Standard__integer
 use        Standard__integer___axiom
 use        Standard__positive___axiom
 use        Standard__integer___axiom
 use        Selection__sort__min___axiom
 use        Selection__sort__c___axiom
 use        Selection__sort__L_1__i___axiom
 use        Selection__sort__L_2__j___axiom
 use        Selection__sort__L_2___axiom
 use        Selection__sort__L_1___axiom
 use        Selection__arr___axiom
 use        Selection__sorted___axiom
 use        Selection__sort__a___axiom
 use        Selection__sort__L_1__T2b___axiom
 use        Selection__sort__L_2__T3b___axiom
 use        Selection__sort__L_1__T14b___axiom
 use        Selection__sort__L_1__T15b___axiom

 let def #"selection.ads" 11 0 0#"W:diverges:N" "GP_Subp:selection.ads:11" 
   (__void_param : unit)
  requires { #"selection.ads" 11 0 0# true }
  ensures { #"selection.ads" 11 0 0# (#"selection.ads" 15 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:selection.ads:15:14" "GP_Shape:pragargs__call_sorted" "GP_Reason:VC_POSTCONDITION" "GP_Id:22" "comment:     Post => Sorted (A);
             ^ selection.ads:15:14:VC_POSTCONDITION" ( "GP_Sloc:selection.ads:15:14" "GP_Pretty_Ada:4154" ((epsilon temp___result_271 : bool.
   ( (temp___result_271 = (Selection__sorted.sorted (Selection__arr.of_array Selection__sort__a.a.Array__Int__Standard__integer.map__content (Standard__integer__rep.to_rep Selection__sort__a.a__first) (Standard__integer__rep.to_rep Selection__sort__a.a__last)))) /\ (Selection__sorted.sorted__function_guard temp___result_271 (Selection__arr.of_array Selection__sort__a.a.Array__Int__Standard__integer.map__content (Standard__integer__rep.to_rep Selection__sort__a.a__first) (Standard__integer__rep.to_rep Selection__sort__a.a__last))) )) = True) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram selection.ads:11 *)
  ;
   assume {  (if (False) then (
   true) else (
   (Selection__arr.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Selection__sort__a.a__first) (Standard__integer__rep.to_rep Selection__sort__a.a__last)))) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram selection.ads:11 *)
  ;
  () (* Check for RTE in the Pre of the subprogram selection.ads:11 *)
  ;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((( -2147483647 ) <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selection__sort__a.a__first ))))) (((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selection__sort__a.a__first ))) <= 2147483646)))) ((Boolean.andb((( -2147483647 ) <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selection__sort__a.a__last ))))) (((Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
   ()))
   end ;
  Selection__sort__a.a__last ))) <= 2147483646))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram selection.ads:11 *)
  ;
   assume {  ( ( (( -2147483647 ) <= (Standard__integer__rep.to_rep Selection__sort__a.a__first)) /\ ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= 2147483646) ) /\ ( (( -2147483647 ) <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) /\ ((Standard__integer__rep.to_rep Selection__sort__a.a__last) <= 2147483646) ) ) };
   try
   ( (#"selection.adb" 5 0 0# ());
   (#"selection.adb" 6 0 0# ( #"selection.adb" 6 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"selection.adb" 6 0 0# assume { #"selection.adb" 6 0 0# (Standard__integer___axiom.default_initial_assumption Selection__sort__min.min.int__content False) };
   #"selection.adb" 6 0 0# assume { #"selection.adb" 6 0 0# (Standard__integer___axiom.dynamic_invariant Selection__sort__min.min.int__content False False True True) } ));
   (#"selection.adb" 7 0 0# ( #"selection.adb" 7 0 0# abstract ensures {true}(let _ = () in (
    ()))
    end ;
   #"selection.adb" 7 0 0# assume { #"selection.adb" 7 0 0# (Standard__integer___axiom.default_initial_assumption Selection__sort__c.c.int__content False) };
   #"selection.adb" 7 0 0# assume { #"selection.adb" 7 0 0# (Standard__integer___axiom.dynamic_invariant Selection__sort__c.c.int__content False False True True) } ));
   (#"selection.adb" 11 0 0# ());
   (#"selection.adb" 9 0 0# ());
   ( "GP_Sloc:selection.adb:9:36" (#"selection.adb" 9 0 0# (let temp___251 = (Standard__integer__rep.to_rep(( #"selection.adb" 9 0 0# abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Selection__sort__a.a__first ))) in (
   (let temp___252 = (#"selection.adb" 9 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:selection.adb:9:33" "GP_Id:20" "comment:      for I in A'First .. A'Last-1 loop
                                ^ selection.adb:9:33:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__range__sub" (Standard__integer.range_check_(((Standard__integer__rep.to_rep(( #"selection.adb" 9 0 0# abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
    ()))
    end ;
   Selection__sort__a.a__last ))) - 1))) )) in (
    (  Selection__sort__L_1__i.i.int__content <- ( temp___251 );
    () (* Translation of an Ada loop from selection.adb:9 *)
    ;
    (if ((Boolean.andb((temp___251 <= Selection__sort__L_1__i.i.int__content)) ((Selection__sort__L_1__i.i.int__content <= temp___252)))) then (
      try
      (  abstract ensures {true}(let _ = Selection__sort__L_1__i.i.int__content in (
       ()))
       end ;
      (let temp___262 =  (any int
      ensures { (result = Selection__sort__L_1__i.i.int__content)} 
      ) in (
       (  abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
        ()))
        end ;
       (let temp___260 =  (any Array__Int__Standard__integer.map
       ensures { (result = Selection__sort__a.a.Array__Int__Standard__integer.map__content)} 
       ) in (
        (  abstract ensures {true}(let _ = Selection__sort__c.c.int__content in (
         ()))
         end ;
        (let temp___258 =  (any int
        ensures { (result = Selection__sort__c.c.int__content)} 
        ) in (
         (  abstract ensures {true}(let _ = Selection__sort__min.min.int__content in (
          ()))
          end ;
         (let temp___257 =  (any int
         ensures { (result = Selection__sort__min.min.int__content)} 
         ) in (
          ( () (* First unroling of the loop statements appearing before the loop invariant of loop selection.adb:9 *)
          ;
          ( "GP_Sloc:selection.adb:10:10" (#"selection.adb" 10 0 0# ()) );
          ( "GP_Sloc:selection.adb:10:14" (#"selection.adb" 10 0 0# #"selection.adb" 10 0 0# Selection__sort__min.min.int__content <- ( Selection__sort__L_1__i.i.int__content )) );
          ( "GP_Sloc:selection.adb:11:31" (#"selection.adb" 11 0 0# (let temp___253 = Selection__sort__L_1__i.i.int__content in (
          (let temp___254 = (Standard__integer__rep.to_rep(( #"selection.adb" 11 0 0# abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
           ()))
           end ;
          Selection__sort__a.a__last ))) in (
           ( #"selection.adb" 11 0 0# Selection__sort__L_2__j.j.int__content <- ( temp___253 );
           () (* Translation of an Ada loop from selection.adb:11 *)
           ;
           (if ((Boolean.andb((temp___253 <= Selection__sort__L_2__j.j.int__content)) ((Selection__sort__L_2__j.j.int__content <= temp___254)))) then (
            #"selection.adb" 11 0 0# try
             ( #"selection.adb" 11 0 0# abstract ensures {true}(let _ = Selection__sort__L_2__j.j.int__content in (
              ()))
              end ;
             (let temp___256 = #"selection.adb" 11 0 0# (any int
             ensures {#"selection.adb" 11 0 0# (result = Selection__sort__L_2__j.j.int__content)} 
             ) in (
              ( #"selection.adb" 11 0 0# abstract ensures {true}(let _ = Selection__sort__min.min.int__content in (
               ()))
               end ;
              (let temp___255 = #"selection.adb" 11 0 0# (any int
              ensures {#"selection.adb" 11 0 0# (result = Selection__sort__min.min.int__content)} 
              ) in (
               ( () (* First unroling of the loop statements appearing before the loop invariant of loop selection.adb:11 *)
               ;
               ( "GP_Sloc:selection.adb:13:25" (#"selection.adb" 13 0 0# ()) );
               ( "GP_Sloc:selection.adb:13:13" (#"selection.adb" 13 0 0# (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (Selection__sort__L_2__j.j.int__content)))) < (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (( #"selection.adb" 13 0 0# assert { #"selection.adb" 13 0 0# (#"selection.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:13:25" "GP_Id:4" "comment:            if A(J) < A(min) then
                        ^ selection.adb:13:25:VC_INDEX_CHECK" "GP_Shape:L_1_while__L_2_while__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
               Selection__sort__min.min.int__content ))))))) then (
                ( ( "GP_Sloc:selection.adb:14:16" (#"selection.adb" 14 0 0# ()) );
                ( "GP_Sloc:selection.adb:14:20" (#"selection.adb" 14 0 0# #"selection.adb" 14 0 0# Selection__sort__min.min.int__content <- ( Selection__sort__L_2__j.j.int__content )) ) )) else (
                ()))) );
               () (* While loop translating the Ada loop from selection.adb:11 *)
               ;
                while True do
                invariant { 
                 (#"selection.adb" 16 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:selection.adb:16:35" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:5" "comment:            pragma Loop_Invariant(min in I .. A'Last);
                                  ^ selection.adb:16:35:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__L_2_while__pragargs__in" ( "GP_Pretty_Ada:2409" "GP_Sloc:selection.adb:16:35" ( (Selection__sort__L_1__i.i.int__content <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) ) ))
                 }
                invariant { 
                 (#"selection.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:selection.adb:17:36" "GP_Id:8" "comment:            pragma Loop_Invariant (for all M in I .. J => A(M) >= A(min));
                                   ^ selection.adb:17:36:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__L_2_while__pragargs__forall" (forall m #"selection.adb" 17 0 0#  "model" "model_trace:2418" "name:M"  : int.
                  ( ( (Selection__sort__L_1__i.i.int__content <= m) /\ (m <= Selection__sort__L_2__j.j.int__content) ) -> ( "GP_Pretty_Ada:2433" "GP_Sloc:selection.adb:17:59" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content m)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content Selection__sort__min.min.int__content))) ) )) ))
                 }
                ( () (* Assume implicit invariants from the loop selection.adb:11 *)
                ;
                 assume {  (Boolean.andb(( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Selection__sort__min.min.int__content False True True True) ) /\ true ) /\ (if ((Selection__sort__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last))) then (
                 (Selection__sort__L_2__T3b.dynamic_property Selection__sort__L_1__i.i.int__content (Standard__integer__rep.to_rep Selection__sort__a.a__last) Selection__sort__L_2__j.j.int__content)) else true) ) /\ true )) (( (Selection__sort__L_1__i.i.int__content <= Selection__sort__L_2__j.j.int__content) /\ (Selection__sort__L_2__j.j.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ))) };
                () (* Check for absence of RTE in the invariant of loop selection.adb:11 *)
                ;
                 abstract ensures {true}(let _ = (Boolean.andb((Selection__sort__L_1__i.i.int__content <= Selection__sort__min.min.int__content)) ((Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
                 ()))
                 end ;
                Selection__sort__a.a__last )))))) in (
                 ()))
                 end ;
                 abstract ensures {true}(let _ = ( (let m =  (any int
                ) in (
                 (if ((Boolean.andb((Selection__sort__L_1__i.i.int__content <= m)) ((m <= Selection__sort__L_2__j.j.int__content)))) then (
                   abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"selection.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:17:61" "GP_Id:6" "comment:            pragma Loop_Invariant (for all M in I .. J => A(M) >= A(min));
                                                            ^ selection.adb:17:61:VC_INDEX_CHECK" "GP_Shape:L_1_while__L_2_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= m) /\ (m <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
                  m ))))) >= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"selection.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__L_2_while__pragargs__forall__cmp__ixdcomp" "GP_Sloc:selection.adb:17:69" "GP_Id:7" "comment:            pragma Loop_Invariant (for all M in I .. J => A(M) >= A(min));
                                                                    ^ selection.adb:17:69:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
                  Selection__sort__min.min.int__content )))))) in (
                   ()))
                   end ))))
                ;
                 (any bool
                requires { true} 
                ensures { ( (result = True) <-> (forall m   "model" "model_trace:2418" "name:M"  : int.
                 ( ( (Selection__sort__L_1__i.i.int__content <= m) /\ (m <= Selection__sort__L_2__j.j.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content m)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content Selection__sort__min.min.int__content))) )) )} 
                ) ) in (
                 ()))
                 end ;
                () (* Loop statements appearing after the loop invariant of loop selection.adb:11 *)
                ;
                () (* Check for the exit condition and loop statements appearing before the loop invariant of loop selection.adb:11 *)
                ;
                (if ((Selection__sort__L_2__j.j.int__content = temp___254)) then (
                  raise Selection__sort__L_2.L_2));
                 Selection__sort__L_2__j.j.int__content <- ( (Selection__sort__L_2__j.j.int__content + 1) );
                ( "GP_Sloc:selection.adb:13:25" (#"selection.adb" 13 0 0# ()) );
                ( "GP_Sloc:selection.adb:13:13" (#"selection.adb" 13 0 0# (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (Selection__sort__L_2__j.j.int__content)))) < (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (( #"selection.adb" 13 0 0# assert { #"selection.adb" 13 0 0# (#"selection.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:13:25" "GP_Id:4" "comment:            if A(J) < A(min) then
                        ^ selection.adb:13:25:VC_INDEX_CHECK" "GP_Shape:L_1_while__L_2_while__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
                Selection__sort__min.min.int__content ))))))) then (
                 ( ( "GP_Sloc:selection.adb:14:16" (#"selection.adb" 14 0 0# ()) );
                 ( "GP_Sloc:selection.adb:14:20" (#"selection.adb" 14 0 0# #"selection.adb" 14 0 0# Selection__sort__min.min.int__content <- ( Selection__sort__L_2__j.j.int__content )) ) )) else (
                 ()))) ) )
               done )))
               )))
              )
            with
             Selection__sort__L_2.L_2 -> ()
            end)) )))
          ))
          ) );
          ( "GP_Sloc:selection.adb:19:10" (#"selection.adb" 19 0 0# ()) );
          ( "GP_Sloc:selection.adb:19:12" (#"selection.adb" 19 0 0# #"selection.adb" 19 0 0# Selection__sort__c.c.int__content <- ( (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (( #"selection.adb" 19 0 0# assert { #"selection.adb" 19 0 0# (#"selection.adb" 19 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:19:17" "GP_Id:9" "comment:         c := A(i);
                ^ selection.adb:19:17:VC_INDEX_CHECK" "GP_Shape:L_1_while__c_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__L_1__i.i.int__content) /\ (Selection__sort__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
          Selection__sort__L_1__i.i.int__content ))))) )) );
          ( "GP_Sloc:selection.adb:20:20" (#"selection.adb" 20 0 0# ()) );
          ( "GP_Sloc:selection.adb:20:15" (#"selection.adb" 20 0 0# #"selection.adb" 20 0 0# Selection__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (( #"selection.adb" 20 0 0# assert { #"selection.adb" 20 0 0# (#"selection.adb" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__a_assign__ixdcomp" "GP_Sloc:selection.adb:20:12" "GP_Id:11" "comment:         A(i) := A(min);
           ^ selection.adb:20:12:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__L_1__i.i.int__content) /\ (Selection__sort__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
          Selection__sort__L_1__i.i.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"selection.adb" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:20:20" "GP_Id:10" "comment:         A(i) := A(min);
                   ^ selection.adb:20:20:VC_INDEX_CHECK" "GP_Shape:L_1_while__a_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
          Selection__sort__min.min.int__content ))))))))) )) );
          ( "GP_Sloc:selection.adb:21:12" (#"selection.adb" 21 0 0# ()) );
          ( "GP_Sloc:selection.adb:21:20" (#"selection.adb" 21 0 0# ()) );
          ( "GP_Sloc:selection.adb:21:17" (#"selection.adb" 21 0 0# #"selection.adb" 21 0 0# Selection__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (( #"selection.adb" 21 0 0# assert { #"selection.adb" 21 0 0# (#"selection.adb" 21 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__a_assign__ixdcomp" "GP_Sloc:selection.adb:21:12" "GP_Id:12" "comment:         A(min) := c;
           ^ selection.adb:21:12:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
          Selection__sort__min.min.int__content )) ((Standard__integer__rep.of_rep(Selection__sort__c.c.int__content)))) )) );
          ( "GP_Sloc:selection.adb:26:33" (#"selection.adb" 26 0 0# ()) );
          () (* While loop translating the Ada loop from selection.adb:9 *)
          ;
           while True do
           invariant { 
            (#"selection.adb" 22 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:selection.adb:22:33" "GP_Id:16" "comment:         pragma Loop_Invariant (for all J in I+1 .. A'last => A(I) <= A(J));
                                ^ selection.adb:22:33:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__pragargs__forall" (forall j #"selection.adb" 22 0 0#  "model" "name:J" "model_trace:2458"  : int.
             ( ( ((Selection__sort__L_1__i.i.int__content + 1) <= j) /\ (j <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) -> ( "GP_Pretty_Ada:2477" "GP_Sloc:selection.adb:22:63" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content Selection__sort__L_1__i.i.int__content)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content j))) ) )) ))
            }
           invariant { 
            (#"selection.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:selection.adb:26:33" "GP_Shape:L_1_while__pragargs__call_sorted" "GP_Id:19" "comment:         pragma Loop_Invariant (Sorted (A (A'First .. I)));
                                ^ selection.adb:26:33:VC_LOOP_INVARIANT" ( "GP_Sloc:selection.adb:26:33" "GP_Pretty_Ada:2491" ((epsilon temp___result_267 : bool.
             ( (temp___result_267 = (Selection__sorted.sorted (let temp___266 = (let temp___265 = (Standard__integer__rep.to_rep Selection__sort__a.a__first) in (
              (Selection__sort__L_1__T15b.of_array Selection__sort__a.a.Array__Int__Standard__integer.map__content temp___265 Selection__sort__L_1__i.i.int__content)))
              in (
              (Selection__arr.of_array (Selection__sort__L_1__T15b.to_array temp___266) (Selection__sort__L_1__T15b.first temp___266) (Selection__sort__L_1__T15b.last temp___266))))
             )) /\ (Selection__sorted.sorted__function_guard temp___result_267 (let temp___266 = (let temp___265 = (Standard__integer__rep.to_rep Selection__sort__a.a__first) in (
              (Selection__sort__L_1__T15b.of_array Selection__sort__a.a.Array__Int__Standard__integer.map__content temp___265 Selection__sort__L_1__i.i.int__content)))
              in (
              (Selection__arr.of_array (Selection__sort__L_1__T15b.to_array temp___266) (Selection__sort__L_1__T15b.first temp___266) (Selection__sort__L_1__T15b.last temp___266))))
             ) )) = True) ) ))
            }
           ( () (* Assume implicit invariants from the loop selection.adb:9 *)
           ;
            assume {  (Boolean.andb(( ( ( ( ( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Selection__sort__min.min.int__content False True True True) ) /\ true ) /\ (Standard__integer___axiom.dynamic_invariant Selection__sort__c.c.int__content False True True True) ) /\ true ) /\ (if (True) then (
            true) else (
            (Selection__arr.dynamic_property Standard__positive.first Standard__positive.last (Standard__integer__rep.to_rep Selection__sort__a.a__first) (Standard__integer__rep.to_rep Selection__sort__a.a__last)))) ) /\ (forall temp___261   : int.
            (if (( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= temp___261) /\ (temp___261 <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) )) then (
             (if (( false /\ ( (temp___252 < temp___261) \/ ( (temp___261 < temp___251) \/ (Selection__sort__L_1__i.i.int__content < temp___261) ) ) )) then (
              ((Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content temp___261) = (Array__Int__Standard__integer.get temp___260 temp___261))) else (
              true))) else true)) ) /\ (if (((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= ((Standard__integer__rep.to_rep Selection__sort__a.a__last) - 1))) then (
            (Selection__sort__L_1__T2b.dynamic_property (Standard__integer__rep.to_rep Selection__sort__a.a__first) ((Standard__integer__rep.to_rep Selection__sort__a.a__last) - 1) Selection__sort__L_1__i.i.int__content)) else true) ) /\ true )) (( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__L_1__i.i.int__content) /\ (Selection__sort__L_1__i.i.int__content <= ((Standard__integer__rep.to_rep Selection__sort__a.a__last) - 1)) ))) };
           () (* Check for absence of RTE in the invariant of loop selection.adb:9 *)
           ;
            abstract ensures {true}(let _ = ( (let j =  (any int
           ) in (
            (if ((Boolean.andb(((#"selection.adb" 22 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Sloc:selection.adb:22:47" "GP_Id:13" "comment:         pragma Loop_Invariant (for all J in I+1 .. A'last => A(I) <= A(J));
                                              ^ selection.adb:22:47:VC_OVERFLOW_CHECK" "GP_Shape:L_1_while__pragargs__forall__range__add" (Standard__integer.range_check_((Selection__sort__L_1__i.i.int__content + 1))) )) <= j)) ((j <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
             ()))
             end ;
            Selection__sort__a.a__last ))))))) then (
              abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"selection.adb" 22 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:22:65" "GP_Id:14" "comment:         pragma Loop_Invariant (for all J in I+1 .. A'last => A(I) <= A(J));
                                                                ^ selection.adb:22:65:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__L_1__i.i.int__content) /\ (Selection__sort__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
             Selection__sort__L_1__i.i.int__content ))))) <= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"selection.adb" 22 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__pragargs__forall__cmp__ixdcomp" "GP_Sloc:selection.adb:22:73" "GP_Id:15" "comment:         pragma Loop_Invariant (for all J in I+1 .. A'last => A(I) <= A(J));
                                                                        ^ selection.adb:22:73:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= j) /\ (j <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
             j )))))) in (
              ()))
              end ))))
           ;
            (any bool
           requires { true} 
           ensures { ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2458"  : int.
            ( ( ((Selection__sort__L_1__i.i.int__content + 1) <= j) /\ (j <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content Selection__sort__L_1__i.i.int__content)) <= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content j))) )) )} 
           ) ) in (
            ()))
            end ;
            abstract ensures {true}(let _ = (#"selection.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:selection.adb:26:33" "GP_Reason:VC_PRECONDITION" "GP_Id:18" "comment:         pragma Loop_Invariant (Sorted (A (A'First .. I)));
                                ^ selection.adb:26:33:VC_PRECONDITION" "GP_Shape:L_1_while__pragargs__call_sorted" (Selection__sorted___axiom.sorted((let temp___264 = (let temp___263 = (Standard__integer__rep.to_rep(( #"selection.adb" 26 0 0# abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
            ()))
            end ;
           Selection__sort__a.a__first ))) in (
            (Selection__sort__L_1__T15b.of_array(( #"selection.adb" 26 0 0# assert { #"selection.adb" 26 0 0# (#"selection.adb" 26 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:selection.adb:26:41" "GP_Reason:VC_RANGE_CHECK" "GP_Id:17" "comment:         pragma Loop_Invariant (Sorted (A (A'First .. I)));
                                        ^ selection.adb:26:41:VC_RANGE_CHECK" "GP_Shape:L_1_while__pragargs__call_sorted__slice" ( (temp___263 <= Selection__sort__L_1__i.i.int__content) -> ( ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= temp___263) /\ (temp___263 <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) /\ ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__L_1__i.i.int__content) /\ (Selection__sort__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) ) ) )) };
            Selection__sort__a.a.Array__Int__Standard__integer.map__content )) (temp___263) (Selection__sort__L_1__i.i.int__content))))
            in (
            (Selection__arr.of_array((Selection__sort__L_1__T15b.to_array(temp___264))) ((Selection__sort__L_1__T15b.first(temp___264))) ((Selection__sort__L_1__T15b.last(temp___264))))))
           )) )) in (
            ()))
            end ;
           () (* Loop statements appearing after the loop invariant of loop selection.adb:9 *)
           ;
           () (* Check for the exit condition and loop statements appearing before the loop invariant of loop selection.adb:9 *)
           ;
           (if ((Selection__sort__L_1__i.i.int__content = temp___252)) then (
             raise Selection__sort__L_1.L_1));
            Selection__sort__L_1__i.i.int__content <- ( (Selection__sort__L_1__i.i.int__content + 1) );
           ( "GP_Sloc:selection.adb:10:10" (#"selection.adb" 10 0 0# ()) );
           ( "GP_Sloc:selection.adb:10:14" (#"selection.adb" 10 0 0# #"selection.adb" 10 0 0# Selection__sort__min.min.int__content <- ( Selection__sort__L_1__i.i.int__content )) );
           ( "GP_Sloc:selection.adb:11:31" (#"selection.adb" 11 0 0# (let temp___253 = Selection__sort__L_1__i.i.int__content in (
           (let temp___254 = (Standard__integer__rep.to_rep(( #"selection.adb" 11 0 0# abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
            ()))
            end ;
           Selection__sort__a.a__last ))) in (
            ( #"selection.adb" 11 0 0# Selection__sort__L_2__j.j.int__content <- ( temp___253 );
            () (* Translation of an Ada loop from selection.adb:11 *)
            ;
            (if ((Boolean.andb((temp___253 <= Selection__sort__L_2__j.j.int__content)) ((Selection__sort__L_2__j.j.int__content <= temp___254)))) then (
             #"selection.adb" 11 0 0# try
              ( #"selection.adb" 11 0 0# abstract ensures {true}(let _ = Selection__sort__L_2__j.j.int__content in (
               ()))
               end ;
              (let temp___256 = #"selection.adb" 11 0 0# (any int
              ensures {#"selection.adb" 11 0 0# (result = Selection__sort__L_2__j.j.int__content)} 
              ) in (
               ( #"selection.adb" 11 0 0# abstract ensures {true}(let _ = Selection__sort__min.min.int__content in (
                ()))
                end ;
               (let temp___255 = #"selection.adb" 11 0 0# (any int
               ensures {#"selection.adb" 11 0 0# (result = Selection__sort__min.min.int__content)} 
               ) in (
                ( () (* First unroling of the loop statements appearing before the loop invariant of loop selection.adb:11 *)
                ;
                ( "GP_Sloc:selection.adb:13:25" (#"selection.adb" 13 0 0# ()) );
                ( "GP_Sloc:selection.adb:13:13" (#"selection.adb" 13 0 0# (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (Selection__sort__L_2__j.j.int__content)))) < (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (( #"selection.adb" 13 0 0# assert { #"selection.adb" 13 0 0# (#"selection.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:13:25" "GP_Id:4" "comment:            if A(J) < A(min) then
                        ^ selection.adb:13:25:VC_INDEX_CHECK" "GP_Shape:L_1_while__L_2_while__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
                Selection__sort__min.min.int__content ))))))) then (
                 ( ( "GP_Sloc:selection.adb:14:16" (#"selection.adb" 14 0 0# ()) );
                 ( "GP_Sloc:selection.adb:14:20" (#"selection.adb" 14 0 0# #"selection.adb" 14 0 0# Selection__sort__min.min.int__content <- ( Selection__sort__L_2__j.j.int__content )) ) )) else (
                 ()))) );
                () (* While loop translating the Ada loop from selection.adb:11 *)
                ;
                 while True do
                 invariant { 
                  (#"selection.adb" 16 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:selection.adb:16:35" "GP_Reason:VC_LOOP_INVARIANT" "GP_Id:5" "comment:            pragma Loop_Invariant(min in I .. A'Last);
                                  ^ selection.adb:16:35:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__L_2_while__pragargs__in" ( "GP_Pretty_Ada:2409" "GP_Sloc:selection.adb:16:35" ( (Selection__sort__L_1__i.i.int__content <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) ) ))
                  }
                 invariant { 
                  (#"selection.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc:selection.adb:17:36" "GP_Id:8" "comment:            pragma Loop_Invariant (for all M in I .. J => A(M) >= A(min));
                                   ^ selection.adb:17:36:VC_LOOP_INVARIANT" "GP_Shape:L_1_while__L_2_while__pragargs__forall" (forall m #"selection.adb" 17 0 0#  "model" "model_trace:2418" "name:M"  : int.
                   ( ( (Selection__sort__L_1__i.i.int__content <= m) /\ (m <= Selection__sort__L_2__j.j.int__content) ) -> ( "GP_Pretty_Ada:2433" "GP_Sloc:selection.adb:17:59" ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content m)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content Selection__sort__min.min.int__content))) ) )) ))
                  }
                 ( () (* Assume implicit invariants from the loop selection.adb:11 *)
                 ;
                  assume {  (Boolean.andb(( ( ( ( true /\ (Standard__integer___axiom.dynamic_invariant Selection__sort__min.min.int__content False True True True) ) /\ true ) /\ (if ((Selection__sort__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last))) then (
                  (Selection__sort__L_2__T3b.dynamic_property Selection__sort__L_1__i.i.int__content (Standard__integer__rep.to_rep Selection__sort__a.a__last) Selection__sort__L_2__j.j.int__content)) else true) ) /\ true )) (( (Selection__sort__L_1__i.i.int__content <= Selection__sort__L_2__j.j.int__content) /\ (Selection__sort__L_2__j.j.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ))) };
                 () (* Check for absence of RTE in the invariant of loop selection.adb:11 *)
                 ;
                  abstract ensures {true}(let _ = (Boolean.andb((Selection__sort__L_1__i.i.int__content <= Selection__sort__min.min.int__content)) ((Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep((  abstract ensures {true}(let _ = Selection__sort__a.a.Array__Int__Standard__integer.map__content in (
                  ()))
                  end ;
                 Selection__sort__a.a__last )))))) in (
                  ()))
                  end ;
                  abstract ensures {true}(let _ = ( (let m =  (any int
                 ) in (
                  (if ((Boolean.andb((Selection__sort__L_1__i.i.int__content <= m)) ((m <= Selection__sort__L_2__j.j.int__content)))) then (
                    abstract ensures {true}(let _ = ((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"selection.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:17:61" "GP_Id:6" "comment:            pragma Loop_Invariant (for all M in I .. J => A(M) >= A(min));
                                                            ^ selection.adb:17:61:VC_INDEX_CHECK" "GP_Shape:L_1_while__L_2_while__pragargs__forall__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= m) /\ (m <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
                   m ))))) >= (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"selection.adb" 17 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__L_2_while__pragargs__forall__cmp__ixdcomp" "GP_Sloc:selection.adb:17:69" "GP_Id:7" "comment:            pragma Loop_Invariant (for all M in I .. J => A(M) >= A(min));
                                                                    ^ selection.adb:17:69:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
                   Selection__sort__min.min.int__content )))))) in (
                    ()))
                    end ))))
                 ;
                  (any bool
                 requires { true} 
                 ensures { ( (result = True) <-> (forall m   "model" "model_trace:2418" "name:M"  : int.
                  ( ( (Selection__sort__L_1__i.i.int__content <= m) /\ (m <= Selection__sort__L_2__j.j.int__content) ) -> ((Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content m)) >= (Standard__integer__rep.to_rep (Array__Int__Standard__integer.get Selection__sort__a.a.Array__Int__Standard__integer.map__content Selection__sort__min.min.int__content))) )) )} 
                 ) ) in (
                  ()))
                  end ;
                 () (* Loop statements appearing after the loop invariant of loop selection.adb:11 *)
                 ;
                 () (* Check for the exit condition and loop statements appearing before the loop invariant of loop selection.adb:11 *)
                 ;
                 (if ((Selection__sort__L_2__j.j.int__content = temp___254)) then (
                   raise Selection__sort__L_2.L_2));
                  Selection__sort__L_2__j.j.int__content <- ( (Selection__sort__L_2__j.j.int__content + 1) );
                 ( "GP_Sloc:selection.adb:13:25" (#"selection.adb" 13 0 0# ()) );
                 ( "GP_Sloc:selection.adb:13:13" (#"selection.adb" 13 0 0# (if (((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (Selection__sort__L_2__j.j.int__content)))) < (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (( #"selection.adb" 13 0 0# assert { #"selection.adb" 13 0 0# (#"selection.adb" 13 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:13:25" "GP_Id:4" "comment:            if A(J) < A(min) then
                        ^ selection.adb:13:25:VC_INDEX_CHECK" "GP_Shape:L_1_while__L_2_while__if__cmp__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
                 Selection__sort__min.min.int__content ))))))) then (
                  ( ( "GP_Sloc:selection.adb:14:16" (#"selection.adb" 14 0 0# ()) );
                  ( "GP_Sloc:selection.adb:14:20" (#"selection.adb" 14 0 0# #"selection.adb" 14 0 0# Selection__sort__min.min.int__content <- ( Selection__sort__L_2__j.j.int__content )) ) )) else (
                  ()))) ) )
                done )))
                )))
               )
             with
              Selection__sort__L_2.L_2 -> ()
             end)) )))
           ))
           ) );
           ( "GP_Sloc:selection.adb:19:10" (#"selection.adb" 19 0 0# ()) );
           ( "GP_Sloc:selection.adb:19:12" (#"selection.adb" 19 0 0# #"selection.adb" 19 0 0# Selection__sort__c.c.int__content <- ( (Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (( #"selection.adb" 19 0 0# assert { #"selection.adb" 19 0 0# (#"selection.adb" 19 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:19:17" "GP_Id:9" "comment:         c := A(i);
                ^ selection.adb:19:17:VC_INDEX_CHECK" "GP_Shape:L_1_while__c_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__L_1__i.i.int__content) /\ (Selection__sort__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
           Selection__sort__L_1__i.i.int__content ))))) )) );
           ( "GP_Sloc:selection.adb:20:20" (#"selection.adb" 20 0 0# ()) );
           ( "GP_Sloc:selection.adb:20:15" (#"selection.adb" 20 0 0# #"selection.adb" 20 0 0# Selection__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (( #"selection.adb" 20 0 0# assert { #"selection.adb" 20 0 0# (#"selection.adb" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__a_assign__ixdcomp" "GP_Sloc:selection.adb:20:12" "GP_Id:11" "comment:         A(i) := A(min);
           ^ selection.adb:20:12:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__L_1__i.i.int__content) /\ (Selection__sort__L_1__i.i.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
           Selection__sort__L_1__i.i.int__content )) ((Standard__integer__rep.of_rep((Standard__integer__rep.to_rep((Array__Int__Standard__integer.get(Selection__sort__a.a.Array__Int__Standard__integer.map__content) ((  assert {  (#"selection.adb" 20 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Sloc:selection.adb:20:20" "GP_Id:10" "comment:         A(i) := A(min);
                   ^ selection.adb:20:20:VC_INDEX_CHECK" "GP_Shape:L_1_while__a_assign__ixdcomp" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
           Selection__sort__min.min.int__content ))))))))) )) );
           ( "GP_Sloc:selection.adb:21:12" (#"selection.adb" 21 0 0# ()) );
           ( "GP_Sloc:selection.adb:21:20" (#"selection.adb" 21 0 0# ()) );
           ( "GP_Sloc:selection.adb:21:17" (#"selection.adb" 21 0 0# #"selection.adb" 21 0 0# Selection__sort__a.a.Array__Int__Standard__integer.map__content <- ( (Array__Int__Standard__integer.set(Selection__sort__a.a.Array__Int__Standard__integer.map__content) (( #"selection.adb" 21 0 0# assert { #"selection.adb" 21 0 0# (#"selection.adb" 21 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_INDEX_CHECK" "GP_Shape:L_1_while__a_assign__ixdcomp" "GP_Sloc:selection.adb:21:12" "GP_Id:12" "comment:         A(min) := c;
           ^ selection.adb:21:12:VC_INDEX_CHECK" ( ((Standard__integer__rep.to_rep Selection__sort__a.a__first) <= Selection__sort__min.min.int__content) /\ (Selection__sort__min.min.int__content <= (Standard__integer__rep.to_rep Selection__sort__a.a__last)) ) )) };
           Selection__sort__min.min.int__content )) ((Standard__integer__rep.of_rep(Selection__sort__c.c.int__content)))) )) );
           ( "GP_Sloc:selection.adb:26:33" (#"selection.adb" 26 0 0# ()) ) )
          done )))
          )))
         )))
        )))
       )
     with
      Selection__sort__L_1.L_1 -> ()
     end)) )))
   ))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (#"selection.ads" 15 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_PRECONDITION" "GP_Sloc:selection.ads:15:14" "GP_Id:21" "comment:     Post => Sorted (A);
             ^ selection.ads:15:14:VC_PRECONDITION" "GP_Shape:pragargs__call_sorted" (Selection__sorted___axiom.sorted((Selection__arr.of_array(Selection__sort__a.a.Array__Int__Standard__integer.map__content) ((Standard__integer__rep.to_rep(Selection__sort__a.a__first))) ((Standard__integer__rep.to_rep(Selection__sort__a.a__last)))))) )) in (
   ()))
   end  )
end
